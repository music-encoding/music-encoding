# This workflow will perform the following steps for pushes the the develop branch
# * build the Schema and the Guidelines with Ant
# * publish the Schema to music-encoding/schema under ./dev
# * publish the Guidelines to music-encoding/guidelines under ./dev

name: Deploy Schema and Guidelines

on:
  push:
    branches: [develop]

env:
  REPO_OWNER: music-encoding

  # schema
  SCHEMA_REPO: ${{ github.repository_owner }}/schema
  SCHEMA_BRANCH: main

  # guidelines
  GUIDELINES_REPO: ${{ github.repository_owner }}/guidelines
  GUIDELINES_BRANCH: main

  # temporary directories
  SCHEMA_DIR: schema-dir
  GUIDELINES_DIR: guidelines-dir

jobs:
  build:
    name: Build and deploy Schema and Guidelines
    runs-on: ubuntu-latest

    steps:
      ### BUIDLING THE SCHEMA AND THE GUIDELINES ###
      - name: Checkout main repo
        uses: actions/checkout@v3
        with:
          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to
          # recursively checkout submodules.
          #
          # When the `ssh-key` input is not provided, SSH URLs beginning with
          # `git@github.com:` are converted to HTTPS.
          #
          # Default: false
          submodules: recursive
      
      - name: Build schema and guidelines with Docker image
        run: docker run --rm -v $(pwd):/opt/docker-mei/music-encoding ghcr.io/music-encoding/docker-mei:latest ant -noinput -buildfile music-encoding/build.xml -Ddocker=true -Dgithub.sha=${{ github.sha }} -Dgithub.event_name=${{ github.event_name }} -Dgithub.ref=${{ github.ref }}

      ### UPLOADING THE ARTIFACTS ### 
      - name: Upload PDF
        uses: actions/upload-artifact@v3
        with:
          name: pdf
          path: ${{ github.workspace }}/dist/guidelines/pdf/MEI_Guidelines_v5.0.0-dev.pdf
      
      - name: Upload Prince XML log
        uses: actions/upload-artifact@v3
        with:
          name: prince_log
          path: ${{ github.workspace }}/build/prince.log

      ### PUBLISHING THE SCHEMA ###
      - name: Checkout SCHEMA_REPO into SCHEMA_DIR
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        uses: actions/checkout@v3
        with:
          # repository to check out
          repository: ${{ env.SCHEMA_REPO }}
          # Deploy key as secret for accessing <owner>/<SCHEMA_REPO>;
          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751
          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_SCHEMA }}
          # ref (branch, tag or SHA) to check out
          ref: ${{ env.SCHEMA_BRANCH }}
          # relative path under $GITHUB_WORKSPACE to place the repository
          path: ${{ env.SCHEMA_DIR }}

      - name: Copy built schema to SCHEMA_DIR
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        run: | 
          rm -r $SCHEMA_DIR/dev
          cp -r dist/schemata/ $SCHEMA_DIR/
          mv $SCHEMA_DIR/schemata $SCHEMA_DIR/dev
          cp -r build/mei-source_canonicalized.xml $SCHEMA_DIR/dev

      - name: Check git status before commit
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        working-directory: ${{ env.SCHEMA_DIR }}
        run: |
          git config --get remote.origin.url
          git status

      - name: Configure git
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        working-directory: ${{ env.SCHEMA_DIR }}
        run: |
          echo "Configuring git..."
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

      - name: Commit files
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        working-directory: ${{ env.SCHEMA_DIR }}
        run: |
          echo "Running git commit..."
          git add .
          git commit -m "Auto-commit of schema build for ${{ github.repository }}@${{ github.sha }}"

      - name: Push changes to SCHEMA
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        working-directory: ${{ env.SCHEMA_DIR }}
        run: git push origin HEAD:$SCHEMA_BRANCH

      ### PUBLISHING THE GUIDELINES ###
      - name: Checkout GUIDELINES_REPO into GUIDELINES_DIR
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        uses: actions/checkout@v3
        with:
          # repository to check out
          repository: ${{ env.GUIDELINES_REPO }}
          # Deploy key as secret for accessing <owner>/<GUIDELINES_REPO>;
          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751
          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_GUIDELINES }}
          # ref (branch, tag or SHA) to check out
          ref: ${{ env.GUIDELINES_BRANCH }}
          # relative path under $GITHUB_WORKSPACE to place the repository
          path: ${{ env.GUIDELINES_DIR }}

      - name: Copy built guidelines to GUIDELINES_DIR
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        run: |
          rm -rf $GUIDELINES_DIR/dev 
          cp -r dist/guidelines/web $GUIDELINES_DIR/
          mv $GUIDELINES_DIR/web $GUIDELINES_DIR/dev
          cp -r dist/guidelines/pdf/MEI_Guidelines_v5.0.0-dev.pdf $GUIDELINES_DIR/dev/

      - name: Check git status before commit
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        working-directory: ${{ env.GUIDELINES_DIR }}
        run: |
          git config --get remote.origin.url
          git status

      - name: Configure git
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        working-directory: ${{ env.GUIDELINES_DIR }}
        run: |
          echo "Configuring git..."
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

      - name: Commit files
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        working-directory: ${{ env.GUIDELINES_DIR }}
        run: |
          echo "Running git commit..."
          git add .
          git commit -m "Auto-commit of guidelines build for ${{ github.repository }}@${{ github.sha }}"

      - name: Push changes to GUIDELINES
        if: ${{ github.repository_owner == env.REPO_OWNER }}
        working-directory: ${{ env.GUIDELINES_DIR }}
        run: git push origin HEAD:$GUIDELINES_BRANCH
