<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<TEI xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>MEI Next Release (2015?) Testing</title>
        <respStmt>
          <resp>Authored by</resp>
          <name xml:id="PR">Perry Roland</name>
        </respStmt>
      </titleStmt>
      <publicationStmt>
        <p/>
      </publicationStmt>
      <sourceDesc>
        <p/>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change n="1" when="2014-12-04" who="#PR">
        <desc>Creation of the initial ODD.</desc>
      </change>
    </revisionDesc>
  </teiHeader>
  <text>
    <front>
      <divGen type="toc"/>
    </front>
    <body>
      <!-- ALL ELEMENTS -->
      <!--
        abbr accessRestrict accid acqSource actor add address addrLine altId anchoredText annot 
        app appInfo application arpeg arranger artic audience author availability avFile back 
        barLine barre beam beamSpan beatRpt bend bibl biblList biblScope body breath bTrem byline 
        caption captureMode carrierForm castGrp castItem castList cc chan change changeDesc chanPr 
        choice chord chordDef chordMember chordTable classCode classification clef clefGrp clip 
        componentGrp composer condition contentItem contents context corpName corr correction 
        creation cue curve custos damage date del dimensions dir distributor div dot dynam edition 
        editionStmt editor editorialDecl encodingDesc ending ensemble event eventList exhibHist 
        expan expansion expression expressionList extent f facsimile fb fermata fig figDesc fileChar 
        fileDesc fingerprint front fTrem funder fw gap genre geogName gliss graphic group grpSym 
        hairpin halfmRpt hand handList handShift harm harpPedal head hex history identifier imprint 
        incip incipCode incipText ineume inscription instrDef instrGrp instrumentation instrVoice 
        instrVoiceGrp interpretation item itemList key keyAccid keySig l label language langUsage 
        layer layerDef lb lem lg li librettist ligature line list lyricist lyrics marker mdiv measure 
        mei meiCorpus meiHead mensur mensuration metaText meter meterSig meterSigGrp midi mordent 
        mRest mRpt mRpt2 mSpace multiRest multiRpt music name normalization note noteOff noteOn 
        notesStmt num octave orig ossia otherChar p pad part parts pb pedal perfMedium performance 
        periodName persName pgDesc pgFoot pgFoot2 pgHead pgHead2 phrase physDesc physLoc physMedium 
        plateNum playingSpeed port price prog projectDesc proport provenance ptr publisher pubPlace 
        pubStmt quote rdg recipient recording ref reg reh relatedItem relation relationList rend 
        repository resp respStmt rest restore revisionDesc role roleDesc samplingDecl sb score 
        scoreDef scoreFormat section segmentation seqNum series seriesStmt sic slur soundChan source 
        sourceDesc space specRepro sponsor stack staff staffDef staffGrp stdVals styleName subst 
        supplied surface syl syllable symbol symbolDef symbolTable sysReq table tapeConfig td tempo 
        term termList textLang th tie timeline title titlePage titleStmt tr trackConfig treatHist 
        treatSched trill trkName tuplet tupletSpan turn unclear uneume unpub useRestrict vel verse 
        watermark when work workDesc zone
      -->
      <schemaSpec ident="mei" start="mei meiHead meiCorpus music" prefix="mei_"
        ns="http://www.music-encoding.org/ns/mei">

        <moduleRef key="MEI"/>
        <moduleRef key="MEI.shared"/>
        <moduleRef key="MEI.header"/>
        <moduleRef key="MEI.cmn"/>
        <moduleRef key="MEI.mensural"/>
        <moduleRef key="MEI.neumes"/>
        <moduleRef key="MEI.analysis"/>
        <moduleRef key="MEI.cmnOrnaments"/>
        <moduleRef key="MEI.corpus"/>
        <moduleRef key="MEI.critapp"/>
        <moduleRef key="MEI.edittrans"/>
        <moduleRef key="MEI.facsimile"/>
        <moduleRef key="MEI.figtable"/>
        <moduleRef key="MEI.frbr"/>
        <moduleRef key="MEI.harmony"/>
        <!-- Remove MEI.linkalign module -->
        <!--<moduleRef key="MEI.linkalign"/>-->
        <moduleRef key="MEI.lyrics"/>
        <moduleRef key="MEI.midi"/>
        <moduleRef key="MEI.namesdates"/>
        <moduleRef key="MEI.performance"/>
        <moduleRef key="MEI.ptrref"/>
        <moduleRef key="MEI.tablature"/>
        <moduleRef key="MEI.text"/>
        <moduleRef key="MEI.usersymbols"/>

        <!-- Provide new MEI version number -->
        <classSpec ident="att.meiversion" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that record the version of MEI in use.</desc>
          <attList>
            <attDef ident="meiversion" usage="opt">
              <desc>specifies a generic MEI version label.</desc>
              <defaultVal>2015</defaultVal>
              <valList type="closed">
                <valItem ident="2015">
                  <desc>this version of MEI.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="meiversion.num" usage="opt">
              <desc>records a detailed MEI version number.</desc>
              <defaultVal>2.2.0</defaultVal>
              <valList type="closed">
                <valItem ident="2.2.0">
                  <desc>this version of MEI.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>

        <!-- Add model.titlePagePart, issue #36 -->
        <classSpec ident="model.titlePagePart" module="MEI.shared" type="model" mode="add">
          <desc>groups elements that may appear as part of a title page transcription.</desc>
        </classSpec>
        <!-- Create new model for specific responsibility elements. Members will be used in titlePage and byline. -->
        <classSpec ident="model.respLikePart" module="MEI.shared" type="model" mode="add">
          <desc>groups elements that delineate particular responsibilities as opposed to the
            respStmt element that provides for generic statements of responsibility.</desc>
          <classes>
            <memberOf key="model.respLike"/>
            <memberOf key="model.titlePagePart"/>
          </classes>
        </classSpec>
        <!-- Make some existing classes members of titlePagePart -->
        <!-- Simplify relationship between textphraseLike.limited and textphraseLike models, issue #210 -->
        <classSpec ident="model.dateLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups elements containing date expressions.</desc>
          <classes>
            <!--<memberOf key="model.textphraseLike"/>-->
            <memberOf key="model.textphraseLike.limited"/>
            <memberOf key="model.pubStmtPart"/>
            <memberOf key="model.eventPart"/>
            <memberOf key="model.titlePagePart"/>
          </classes>
        </classSpec>
        <classSpec ident="model.editionLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups elements containing bibliographic edition information.</desc>
          <classes>
            <memberOf key="model.biblPart"/>
            <memberOf key="model.titlePagePart"/>
          </classes>
        </classSpec>
        <classSpec ident="model.titleLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups elements that denote names of a bibliographic item.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
            <memberOf key="model.titlePagePart"/>
          </classes>
        </classSpec>
        <!-- Make some existing elements members of titlePagePart -->
        <elementSpec ident="imprint" module="MEI.shared" mode="replace">
          <desc>Information relating to the publication or distribution of a bibliographic
            item.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="model.biblPart"/>
            <memberOf key="model.titlePagePart"/>
          </classes>
          <!-- Relax content model of imprint -->
          <!-- model.annotLike and model.dateLike are no longer needed as they're members of 
            textphraseLike.limited, which is in turn a member of textphraseLike -->
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.imprintPart"/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="respStmt"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI) and
              Encoded Archival Description (EAD) standards.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="series" module="MEI.shared" mode="replace">
          <desc>Contains information about the serial publication in which a bibliographic item has
            appeared.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.biblPart"/>
            <memberOf key="model.titlePagePart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.titleLike"/>
                <rng:ref name="model.locrefLike"/>
                <rng:ref name="editor"/>
                <rng:ref name="respStmt"/>
                <rng:ref name="extent"/>
                <rng:ref name="model.identifierLike"/>
                <rng:ref name="model.pLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <!-- Add new byline element -->
        <elementSpec ident="byline" module="MEI.header" mode="add">
          <desc>Contains the primary statement of responsibility given for a work on its title
            page.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.titlePagePart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
                <rng:ref name="model.respLikePart"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <!-- Make specific responsibility elements members of model.respLikePart -->
        <elementSpec ident="arranger" module="MEI.shared" mode="replace">
          <desc>A person or organization who transcribes a musical composition, usually for a
            different medium from that of the original; in an arrangement the musical substance
            remains essentially unchanged.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.respLikePart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <elementSpec ident="author" module="MEI.shared" mode="replace">
          <desc>The name of the creator of the intellectual content of a non-musical, literary
            work.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.respLikePart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on elements in the Text Encoding Initiative (TEI) and
              Encoded Archival Description (EAD) standards.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="composer" module="MEI.shared" mode="replace">
          <desc>The name of the creator of the intellectual content of a musical work.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.respLikePart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <elementSpec ident="editor" module="MEI.shared" mode="replace">
          <desc>The name of the individual(s), institution(s) or organization(s) acting in an
            editorial capacity.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.respLikePart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="funder" module="MEI.shared" mode="replace">
          <desc>Names of individuals, institutions, or organizations responsible for funding.
            Funders provide financial support for a project; they are distinct from sponsors, who
            provide intellectual support and authority.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.respLikePart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="librettist" module="MEI.shared" mode="replace">
          <desc>Person or organization who is a writer of the text of an opera, oratorio,
            etc.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.respLikePart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <elementSpec ident="lyricist" module="MEI.shared" mode="replace">
          <desc>Person or organization who is a writer of the text of a song.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.respLikePart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <elementSpec ident="sponsor" module="MEI.shared" mode="replace">
          <desc>Names of sponsoring individuals, organizations or institutions. Sponsors give their
            intellectual authority to a project; they are to be distinguished from funders, who
            provide the funding but do not necessarily take intellectual responsibility.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.respLikePart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on elements in the Text Encoding Initiative (TEI) and
              Encoded Archival Description (EAD) standards.</p>
          </remarks>
        </elementSpec>
        <!-- Finally, replace existing titlePage content -->
        <elementSpec ident="titlePage" module="MEI.shared" mode="replace">
          <desc>Contains a transcription of the title page of a text.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.frontPart"/>
          </classes>
          <content>
            <rng:oneOrMore>
              <rng:choice>
                <rng:ref name="model.figureLike"/>
                <rng:ref name="model.milestoneLike.text"/>
                <rng:ref name="model.textcomponentLike"/>
                <rng:ref name="model.titlePagePart"/>
                <rng:ref name="titleStmt"/>
              </rng:choice>
            </rng:oneOrMore>
          </content>
          <remarks>
            <p>This element may be used within the <gi scheme="MEI">physDesc</gi> element when no
              other transcription is provided.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in Encoded Archival Description (EAD)
              standard.</p>
          </remarks>
        </elementSpec>

        <!-- Allow extent in <work> to accommodate intended duration of work, issue #45 -->
        <!-- Add datatype for extent -->
        <macroSpec ident="data.EXTENT" module="MEI" type="dt" mode="add">
          <desc>A standard value.</desc>
          <content>
            <rng:choice>
              <rng:data type="decimal"/>
              <rng:data type="duration"/>
            </rng:choice>
          </content>
        </macroSpec>
        <!-- Add <extent> to model of <work> element -->
        <elementSpec ident="work" module="MEI.header" mode="replace">
          <desc>Provides a detailed description of a work, specifically its history, language use,
            and high-level musical attributes: key, tempo, meter, and medium of performance.</desc>
          <classes>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="model.workLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.identifierLike"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="titleStmt"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:ref name="model.workIdent"/>
            </rng:zeroOrMore>
            <!-- Allow otherChar to be repeatable -->
            <rng:zeroOrMore>
              <rng:ref name="otherChar"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="history"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="langUsage"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="perfMedium"/>
            </rng:optional>
            <!-- Allow extent to be repeatable -->
            <rng:zeroOrMore>
              <rng:ref name="extent"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="audience"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="contents"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="context"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:ref name="biblList"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="notesStmt"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="classification"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="expressionList"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="componentGrp"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="relationList"/>
            </rng:optional>
          </content>
        </elementSpec>
        <!-- Add @val attribute to <extent> that can hold a numeric or durational value -->
        <elementSpec ident="extent" module="MEI.shared" mode="replace">
          <desc>Used to express quantity or size in terms other than physical dimensions, such as
            number of pages, number of records in file, number of bytes, performance duration for
            music, audio recordings and visual projections, etc.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.measurement"/>
            <memberOf key="model.biblPart"/>
            <memberOf key="model.physDescPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="stdval">
              <desc>A decimal number or durational value that captures the extent in a standard
                form. Can only be interpreted in combination with the unit attribute.</desc>
              <datatype>
                <rng:ref name="data.EXTENT"/>
              </datatype>
              <constraintSpec ident="extent_unit_and_stdval_co-constraint" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:extent[@unit eq 'duration'][@stdval]">
                    <sch:assert test="matches(@stdval, '^P')">When @unit = 'duration', @val must
                      contain an unsigned W3C duration.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
              <constraintSpec ident="extent_stdval_and_unit_co-constraint" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:extent[matches(@stdval, '^P')][@unit]">
                    <sch:assert test="matches(@unit, 'duration')">When @stdval contains a W3C
                      duration, @unit must be 'duration'.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
          <remarks>
            <p>Use the <gi scheme="MEI">dimensions</gi> element when it is necessary to specify the
                <hi rend="bold">physical</hi> size of materials being described, for example, height
              and width. The units in which the @val attribute or the extent element's content is
              measured can be recorded in the @unit attribute.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on elements in the Text Encoding Initiative (TEI) and
              Encoded Archival Description (EAD) standards.</p>
          </remarks>
        </elementSpec>
        <!-- Extend @unit values to include "duration" -->
        <classSpec ident="att.measurement" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that record the unit of measurement in which a value is expressed.</desc>
          <attList>
            <attDef ident="unit" usage="opt">
              <desc>indicates the unit used for a measurement of size or duration.</desc>
              <valList type="semi">
                <valItem ident="byte">
                  <desc>byte.</desc>
                </valItem>
                <valItem ident="record">
                  <desc>record.</desc>
                </valItem>
                <valItem ident="cm">
                  <desc>centimeter.</desc>
                </valItem>
                <valItem ident="duration">
                  <desc>elapsed time.</desc>
                </valItem>
                <valItem ident="mm">
                  <desc>millimeter.</desc>
                </valItem>
                <valItem ident="in">
                  <desc>inch.</desc>
                </valItem>
                <valItem ident="issue">
                  <desc>serial issue.</desc>
                </valItem>
                <valItem ident="page">
                  <desc>page.</desc>
                </valItem>
                <valItem ident="px">
                  <desc>pixel.</desc>
                </valItem>
                <valItem ident="pt">
                  <desc>point.</desc>
                </valItem>
                <valItem ident="pc">
                  <desc>pica.</desc>
                </valItem>
                <valItem ident="vu">
                  <desc>MEI virtual unit.</desc>
                </valItem>
                <valItem ident="vol">
                  <desc>serial volume.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>

        <!--<!-\- Include SVG, issue #53 -\->
        <moduleRef url="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/svg11.rng">
          <content>
            <rng:define name="mei_model.graphicLike" combine="choice">
              <rng:ref name="svg"/>
            </rng:define>
          </content>
        </moduleRef>
        <!-\- With symbol no longer in model.graphicprimitiveLike it must be added in symbolDef. -\->
        <elementSpec ident="symbolDef" module="MEI.usersymbols" mode="replace">
          <desc>(symbol definition) – Declaration of an individual symbol in a symbolTable.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.coordinated"/>
          </classes>
          <content>
            <rng:choice>
              <rng:oneOrMore>
                <rng:choice>
                  <rng:ref name="model.graphicprimitiveLike"/>
                  <rng:ref name="svg"/>
                  <rng:ref name="symbol"/>
                </rng:choice>
              </rng:oneOrMore>
            </rng:choice>
          </content>
          <remarks>
            <p>Like a chord table, a symbolTable may be shared between mei instances through the use
              of an external parsed entity containing the symbolTable to be shared.</p>
          </remarks>
        </elementSpec>-->

        <!-- Deprecate <vel> and add @vel to <note>, issue #90 -->
        <!-- <vel> *not* removed since it serves the purpose of setting the velocity of all notes
          from the point of its occurence forward; @vel added in new att.midivelocity class in MIDI module. -->
        <classSpec ident="att.midivelocity" module="MEI.midi" type="atts" mode="add">
          <desc>MIDI attributes pertaining to notes.</desc>
          <attList>
            <attDef ident="vel" usage="opt">
              <desc>MIDI Note-on/off velocity.</desc>
              <datatype>
                <rng:ref name="data.MIDIVALUE"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-- Make att.note.ges member of att.midivelocity -->
        <classSpec ident="att.note.ges" module="MEI.shared" type="atts" mode="replace">
          <desc>Gestural domain attributes.</desc>
          <classes>
            <memberOf key="att.accidental.performed"/>
            <memberOf key="att.articulation.performed"/>
            <memberOf key="att.duration.performed"/>
            <memberOf key="att.instrumentident"/>
            <memberOf key="att.midivelocity"/>
            <memberOf key="att.note.ges.cmn"/>
            <memberOf key="att.note.ges.mensural"/>
            <memberOf key="att.note.ges.tablature"/>
          </classes>
          <attList>
            <attDef ident="oct.ges" usage="opt">
              <desc>records performed octave information that differs from the written value.</desc>
              <datatype>
                <rng:ref name="data.OCTAVE"/>
              </datatype>
            </attDef>
            <attDef ident="pname.ges" usage="opt">
              <desc>contains a performed pitch name that differs from the written value.</desc>
              <datatype>
                <rng:ref name="data.PITCHNAME.GES"/>
              </datatype>
            </attDef>
            <attDef ident="pnum" usage="opt">
              <desc>holds a pitch-to-number mapping, a base-40 or MIDI note number, for
                example.</desc>
              <datatype>
                <rng:ref name="data.PITCHNUMBER"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-- Make att.chord.ges member of att.midivelocity? -->
        <!--<classSpec ident="att.chord.ges" module="MEI.shared" type="atts" mode="replace">
          <desc>Gestural domain attributes.</desc>
          <classes>
            <memberOf key="att.articulation.performed"/>
            <memberOf key="att.duration.performed"/>
            <memberOf key="att.instrumentident"/>
            <memberOf key="att.midivelocity"/>
            <memberOf key="att.chord.ges.cmn"/>
          </classes>
        </classSpec>-->

        <!-- Revise timeline and performance, issue #94 -->
        <!-- Create new datatype for begin/end and interval types -->
        <macroSpec ident="data.BETYPE" module="MEI.shared" type="dt" mode="add">
          <desc>datatypes for values in begin, end, abstype and inttype attributes.</desc>
          <content>
            <rng:choice>
              <rng:value>byte</rng:value>
              <a:documentation>bytes.</a:documentation>
              <rng:value>smil</rng:value>
              <a:documentation>Synchronized Multimedia Integration Language.</a:documentation>
              <rng:value>midi</rng:value>
              <a:documentation>MIDI clicks.</a:documentation>
              <rng:value>mmc</rng:value>
              <a:documentation>MIDI machine code</a:documentation>
              <rng:value>mtc</rng:value>
              <a:documentation>MIDI time code.</a:documentation>
              <rng:value>smpte-25</rng:value>
              <a:documentation>SMPTE 25 EBU.</a:documentation>
              <rng:value>smpte-24</rng:value>
              <a:documentation>SMPTE 24 Film Sync.</a:documentation>
              <rng:value>smpte-df30</rng:value>
              <a:documentation>SMPTE 30 Drop.</a:documentation>
              <rng:value>smpte-ndf30</rng:value>
              <a:documentation>SMPTE 30 Non-Drop.</a:documentation>
              <rng:value>smpte-df29.97</rng:value>
              <a:documentation>SMPTE 29.97 Drop.</a:documentation>
              <rng:value>smpte-ndf29.97</rng:value>
              <a:documentation>SMPTE 29.97 Non-Drop.</a:documentation>
              <rng:value>tcf</rng:value>
              <a:documentation>AES Time-code character format.</a:documentation>
              <rng:value>time</rng:value>
              <a:documentation>ISO 24-hour time format: HH:MM:SS.ss.</a:documentation>
            </rng:choice>
          </content>
        </macroSpec>
        <!-- Revise att.mediabounds to refer to new BETYPEs -->
        <classSpec ident="att.mediabounds" module="MEI.shared" type="atts" mode="replace">
          <desc>attributes that establish the boundaries of a media object.</desc>
          <attList>
            <attDef ident="begin" usage="opt">
              <desc>specifies a point where the relevant content begins. A numerical value must be
                less and a time value must be earlier than that in the end attribute.</desc>
              <datatype>
                <rng:text/>
              </datatype>
            </attDef>
            <attDef ident="end" usage="opt">
              <desc>specifies a point where the relevant content ends. If not specified, the end of
                the content is assumed to be the end point. A numerical value must be greater and a
                time value must be later than that in the begin attribute.</desc>
              <datatype>
                <rng:text/>
              </datatype>
            </attDef>
            <attDef ident="betype" usage="opt">
              <desc>type of values used in the begin/end attributes. The begin and end attributes
                can only be interpreted meaningfully in conjunction with this attribute.</desc>
              <datatype>
                <rng:ref name="data.BETYPE"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-- Remove reference to model.alignLike in music element -->
        <elementSpec ident="music" module="MEI.shared" mode="replace">
          <desc>Contains a single musical text of any kind, whether unitary or composite, for
            example, an etude, opera, song cycle, symphony, or anthology of piano solos.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.meiversion"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.resourceLike"/>
            </rng:zeroOrMore>
            <rng:ref name="macro.musicPart"/>
          </content>
        </elementSpec>
        <!-- Remove reference to model.alignLike in scoreDef element -->
        <elementSpec ident="scoreDef" module="MEI.shared" mode="replace">
          <desc>(score definition) – Container for score meta-information.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.scoreDef.log"/>
            <memberOf key="att.scoreDef.vis"/>
            <memberOf key="att.scoreDef.ges"/>
            <memberOf key="att.scoreDef.anl"/>
            <memberOf key="model.scoreDefLike"/>
          </classes>
          <content>
            <rng:optional>
              <rng:ref name="model.chordTableLike"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="model.symbolTableLike"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="model.keySigLike"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="model.meterSigLike"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="pgHead"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="pgHead2"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="pgFoot"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="pgFoot2"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="instrGrp"/>
            </rng:optional>
            <rng:choice>
              <rng:optional>
                <rng:ref name="model.staffGrpLike"/>
              </rng:optional>
            </rng:choice>
            <!-- Facilitate overlapping staff groups, issue #178 -->
            <!-- Allow grpSym in scoreDef -->
            <rng:zeroOrMore>
              <rng:ref name="grpSym"/>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <!-- Re-create att.alignment in MEI.performance (now that MEI.linkalign has been removed) -->
        <classSpec ident="att.alignment" module="MEI.performance" type="atts" mode="add">
          <desc>Temporal alignment attributes.</desc>
          <constraintSpec ident="check_whenTarget" scheme="isoschematron">
            <constraint>
              <sch:rule context="@when">
                <sch:assert role="warning" test="not(normalize-space(.) eq '')">@when attribute has
                  no content.</sch:assert>
                <sch:assert role="warning"
                  test="every $i in tokenize(., '\s+') satisfies
                  substring($i,2)=//mei:when/@xml:id"
                  >The value in @when must correspond to the @xml:id attribute of a when
                  element.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="when" usage="opt">
              <desc>indicates the point of occurrence of this feature along a time line. Its value
                must be the ID of a <gi scheme="MEI">when</gi> element elsewhere in the
                document.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-- Re-create when element in MEI.performance (now that MEI.linkalign has been removed) -->
        <elementSpec ident="when" module="MEI.performance" mode="add">
          <desc>Indicates a point in time either absolutely (using the absolute attribute), or
            relative to another when element (using the interval and since attributes).</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.datapointing"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="check_when_interval" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:when[@interval]">
                <sch:assert test="@since">@since must be present when @interval is
                  used.</sch:assert>
                <sch:assert
                  test="every $i in tokenize(@since, '\s+') satisfies
                  substring($i,2)=//mei:when/@xml:id"
                  >The value in @since must correspond to the @xml:id attribute of a when
                  element.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="absolute" usage="opt">
              <desc>provides an absolute value for the time point.</desc>
              <datatype>
                <rng:text/>
              </datatype>
            </attDef>
            <attDef ident="interval" usage="opt">
              <desc>specifies the time interval between this time point and the one designated by
                the since attribute. This attribute can only be interpreted meaningfully in
                conjunction with the inttype attribute.</desc>
              <datatype>
                <rng:data type="decimal">
                  <rng:param name="minInclusive">1</rng:param>
                </rng:data>
              </datatype>
            </attDef>
            <attDef ident="abstype" usage="opt">
              <desc>specifies the kind of values used in the absolute attribute.</desc>
              <datatype>
                <rng:ref name="data.BETYPE"/>
              </datatype>
            </attDef>
            <attDef ident="inttype" usage="opt">
              <desc>specifies the kind of values used in the interval attribute.</desc>
              <datatype>
                <rng:ref name="data.BETYPE"/>
              </datatype>
            </attDef>
            <!-- Enforce constraints on attribute targets, issue #226 -->
            <attDef ident="since" usage="opt">
              <desc>identifies the reference point for determining the time of the current when
                element, which is obtained by adding the interval to the time of the reference
                point. The value should be the ID of another when element within the same parent
                element. If the since attribute is omitted and the absolute attribute is not
                specified, then the reference point is understood to be the immediately preceding
                when element.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_sinceTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@since">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@since attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:when/@xml:id"
                      >The value in @since must correspond to the @xml:id attribute of a when
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>data</att> attribute may be used to reference one or more features that
              occur at this point in time.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <!-- Allow <when> as child of recording; make recording a member of att.datapointing -->
        <elementSpec ident="recording" module="MEI.performance" mode="replace">
          <desc>A recorded performance.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.mediabounds"/>
            <memberOf key="att.startid"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="avFile"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="when"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="clip"/>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>The <att>startid</att> attribute may be used to hold a reference to the first feature
              occurring in this performance. This element is analogous to the <gi scheme="MEI"
                >surface</gi> element in the facsimile module.</p>
          </remarks>
        </elementSpec>
        <!-- Allow <when> as child of clip; make clip a member of att.datapointing -->
        <elementSpec ident="clip" module="MEI.performance" mode="replace">
          <desc>Defines a time segment of interest within a recording or within a digital audio or
            video file.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.mediabounds"/>
            <memberOf key="att.startid"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="avFile"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="when"/>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is analogous to the <gi scheme="MEI">zone</gi> element in the facsimile
              module.</p>
          </remarks>
        </elementSpec>

        <!-- Provide method of addition for <add>, issue #123 -->
        <!-- Add @method -->
        <elementSpec ident="add" module="MEI.edittrans" mode="replace">
          <desc>(addition) – Marks an addition to the text.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.trans"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.substPart"/>
            <memberOf key="model.transcriptionLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="model.eventLike"/>
                <rng:ref name="model.eventLike.neumes"/>
                <rng:ref name="model.controleventLike"/>
                <rng:ref name="model.lyricsLike"/>
                <rng:ref name="model.midiLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.eventLike.measureFilling"/>
                <rng:ref name="model.noteModifierLike"/>
                <rng:ref name="model.sectionLike"/>
                <rng:ref name="model.measureLike"/>
                <rng:ref name="model.staffLike"/>
                <rng:ref name="model.layerLike"/>
                <rng:ref name="model.graphicprimitiveLike"/>
                <rng:ref name="model.fLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="method" usage="opt">
              <desc>contains an indication of how the addition was accomplished.</desc>
              <valList type="semi">
                <valItem ident="interline">
                  <desc>new material added to the existing text.</desc>
                </valItem>
                <valItem ident="intraline">
                  <desc>new material added above or below original text.</desc>
                </valItem>
                <valItem ident="overstrike">
                  <desc>new text obscures original.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
          <remarks>
            <p>The <gi scheme="MEI">add</gi> element contains material inserted by an author,
              scribe, annotator, or corrector. The agent responsible for the addition may be encoded
              using the <att>hand</att> attribute, while the <att>resp</att> attribute records the
              editor or transcriber responsible for identifying the hand of the addition. The
                <att>cert</att> attribute signifies the degree of certainty ascribed to the
              identification of the hand of the addition. The editor(s) responsible for asserting
              this particular reading may be recorded in the <att>resp</att> attribute. The value of
              resp must point to one or more identifiers declared in the document header.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>

        <!-- Reserve @rend and @style for CSS-like renditional information, issue #144 -->
        <!-- THIS CHANGE BREAKS BACKWARD COMPATIBILITY! -->
        <classSpec ident="att.barLine.log" module="MEI.shared" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.meterconformance.bar"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>records the appearance and usually the function of the bar line.</desc>
              <datatype>
                <rng:ref name="data.BARRENDITION"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.beamrend" module="MEI.cmn" type="atts" mode="replace">
          <desc>Attributes that record the visual rendition of beams.</desc>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>captures whether a beam is "feathered" and in which direction.</desc>
              <valList type="closed">
                <valItem ident="acc">
                  <desc>(accelerando) indicates that the secondary beams get progressively closer
                    together toward the end of the beam.</desc>
                </valItem>
                <valItem ident="mixed">
                  <desc>(mixed acc and rit) for beams that are "feathered" in both
                    directions.</desc>
                </valItem>
                <valItem ident="rit">
                  <desc>(ritardando) means that the secondary beams become progressively more
                    distant toward the end of the beam.</desc>
                </valItem>
                <valItem ident="norm">
                  <desc>(normal) indicates that the secondary beams are equidistant along the course
                    of the beam.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="slope" usage="opt">
              <desc>records the slope of the beam.</desc>
              <datatype>
                <rng:data type="decimal"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.beatRpt.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.expandable"/>
          </classes>
          <attList>
            <attDef ident="form" usage="req">
              <desc>indicates the number of slashes required to render the appropriate beat repeat
                symbol. When a single beat is repeated, consisting of a single note or chord, it is
                indicated by a single thick, slanting slash; therefore, the value '1' should be
                used. The following values should be used when the beat is divided into even notes:
                4ths or 8ths=1, 16ths=2, 32nds=3, 64ths=4, 128ths=5. When the beat is comprised of
                mixed duration values, the symbol is always rendered as 2 slashes and 2 dots.</desc>
              <datatype>
                <rng:ref name="data.BEATRPT.REND"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.curverend" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that record the visual rendition of curves.</desc>
          <attList>
            <attDef ident="lform" usage="opt">
              <desc>describes the line style of the curve.</desc>
              <datatype>
                <rng:ref name="data.LINEFORM"/>
              </datatype>
            </attDef>
            <attDef ident="lwidth" usage="opt">
              <desc>Width of the line.</desc>
              <datatype>
                <rng:choice>
                  <rng:ref name="data.LINEWIDTHTERM"/>
                  <rng:ref name="data.MEASUREMENT"/>
                </rng:choice>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.meterSig.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>contains an indication of how the meter signature should be rendered.</desc>
              <valList type="closed">
                <valItem ident="num">
                  <desc>show only the number of beats.</desc>
                </valItem>
                <valItem ident="denomsym">
                  <desc>the lower number in the meter signature is replaced by a note symbol.</desc>
                </valItem>
                <valItem ident="norm">
                  <desc>meter signature rendered using traditional numeric values.</desc>
                </valItem>
                <valItem ident="invis">
                  <desc>meter signature not rendered.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.sb.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>indicates whether hash marks should be rendered between systems. See Read, p.
                436, ex. 26-3.</desc>
              <valList type="closed">
                <valItem ident="hash">
                  <desc>display hash marks between systems.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.pedal.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes. The place attribute captures the placement of the pedal
            marking with respect to the staff with which it is associated. Modern publishing
            standards require the place to be 'below'; however, for transcriptions of manuscript
            works, this attribute class allows the full range of values.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.linerend"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.visualoffset"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>determines whether piano pedal marks should be rendered as lines or as
                terms.</desc>
              <valList type="closed">
                <valItem ident="line">
                  <desc>continuous line with start and end positions rendered by vertical bars and
                    bounces shown by upward-pointing "blips".</desc>
                </valItem>
                <valItem ident="pedstar">
                  <desc>pedal down and half pedal rendered with "Ped.", pedal up rendered by "*",
                    pedal "bounce" rendered with "* Ped.".</desc>
                </valItem>
                <valItem ident="altpedstar">
                  <desc>pedal up and down indications same as with "pedstar", but bounce is rendered
                    with "Ped." only.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.bTrem.log" module="MEI.cmn" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.event"/>
            <memberOf key="att.augmentdots"/>
            <memberOf key="att.duration.musical"/>
            <memberOf key="att.numbered"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>indicates whether the tremolo is measured or unmeasured.</desc>
              <valList type="closed">
                <valItem ident="meas">
                  <desc>measured tremolo.</desc>
                </valItem>
                <valItem ident="unmeas">
                  <desc>unmeasured tremolo.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <elementSpec ident="del" module="MEI.edittrans" mode="replace">
          <desc>(deletion) – Contains information deleted, marked as deleted, or otherwise indicated
            as superfluous or spurious in the copy text by an author, scribe, annotator, or
            corrector.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.trans"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.substPart"/>
            <memberOf key="model.transcriptionLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="model.eventLike"/>
                <rng:ref name="model.eventLike.neumes"/>
                <rng:ref name="model.controleventLike"/>
                <rng:ref name="model.lyricsLike"/>
                <rng:ref name="model.midiLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.eventLike.measureFilling"/>
                <rng:ref name="model.noteModifierLike"/>
                <rng:ref name="model.sectionLike"/>
                <rng:ref name="model.measureLike"/>
                <rng:ref name="model.staffLike"/>
                <rng:ref name="model.layerLike"/>
                <rng:ref name="model.graphicprimitiveLike"/>
                <rng:ref name="model.fLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="rend" usage="opt">
              <desc>captures the appearance of the source material using MEI-defined
                descriptors.</desc>
              <datatype>
                <rng:ref name="data.TEXTRENDITION"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>resp</att> attribute contains an ID reference to an element containing the
              name of the editor or transcriber responsible for identifying the hand of the
              deletion. The <att>cert</att> attribute signifies the degree of certainty ascribed to
              the identification of the hand of the deletion. The hand of the agent which made the
              deletion should be pointed to using the <att>hand</att> attribute. The <att>rend</att>
              attribute may be used to record the method used to make the deletion (overstrike,
              strike[through], etc.).</p>
          </remarks>
          <remarks>
            <p>This element is modelled on elements in the Text Encoding Initiative (TEI) and
              Encoded Archival Description (EAD) standards.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="rend" module="MEI.shared" mode="replace">
          <desc>(render) – A formatting element indicating special visual rendering, e.g., bold or
            italicized, of a text word or phrase.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <memberOf key="att.horizontalalign"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.whitespace"/>
            <memberOf key="model.rendLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="altrend" usage="opt">
              <desc>used to extend the values of the rend attribute.</desc>
              <datatype>
                <rng:text/>
              </datatype>
            </attDef>
            <attDef ident="rend" usage="opt">
              <desc>captures the appearance of the source material.</desc>
              <!--<desc>captures the appearance of the element's contents using a formal style
                definition language; that is, either CSS (Cascading Style Sheets) expressions or
                MEI-defined descriptors.</desc>-->
              <datatype>
                <rng:ref name="data.TEXTRENDITION"/>
              </datatype>
            </attDef>
            <attDef ident="rotation" usage="opt">
              <desc>A positive value for rotation rotates the text in a counter-clockwise fashion,
                while negative values produce clockwise rotation.</desc>
              <datatype>
                <rng:ref name="data.DEGREES"/>
              </datatype>
            </attDef>
            <attDef ident="valign" usage="opt">
              <desc>specifies the vertical position of the element content relative to the
                surrounding text.</desc>
              <valList type="closed">
                <valItem ident="top">
                  <desc>aligns the top of the content with the top of the surrounding text.</desc>
                </valItem>
                <valItem ident="middle">
                  <desc>aligns the middle of the content with the middle of the surrounding
                    text.</desc>
                </valItem>
                <valItem ident="bottom">
                  <desc>aligns the bottom of the content with the bottom of the surrounding
                    text.</desc>
                </valItem>
                <valItem ident="baseline">
                  <desc>aligns the baseline of the content with the baseline of the surrounding
                    text.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
          <remarks>
            <p>When an entire element should be rendered in a special way, a style sheet function
              can be used instead of the <gi scheme="MEI">rend</gi> element.</p>
          </remarks>
        </elementSpec>

        <!-- Clarify element description of <supplied>, issue #160 -->
        <elementSpec ident="supplied" module="MEI.edittrans" mode="replace">
          <desc>Contains material supplied by the transcriber or editor for any reason.</desc>
          <classes>
            <memberOf key="att.agentident"/>
            <memberOf key="att.common"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.reasonident"/>
            <memberOf key="model.substPart"/>
            <memberOf key="model.transcriptionLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="model.eventLike"/>
                <rng:ref name="model.eventLike.neumes"/>
                <rng:ref name="model.controleventLike"/>
                <rng:ref name="model.lyricsLike"/>
                <rng:ref name="model.midiLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.eventLike.measureFilling"/>
                <rng:ref name="model.noteModifierLike"/>
                <rng:ref name="model.sectionLike"/>
                <rng:ref name="model.measureLike"/>
                <rng:ref name="model.staffLike"/>
                <rng:ref name="model.layerLike"/>
                <rng:ref name="model.graphicprimitiveLike"/>
                <rng:ref name="model.fLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>When the presumed loss of text arises from an identifiable cause, agent signifies the
              causative agent. When the presumed loss of text arises from action (partial deletion,
              etc.) assignable to an identifiable hand, the <att>hand</att> attribute signifies the
              hand responsible for the action. The <att>reason</att> attribute indicates why the
              text has to be supplied, e.g. 'overbinding', 'faded ink', 'lost folio', 'omitted in
              original', etc. The <att>source</att> attribute contains the source of the supplied
              text. The editor(s) responsible for supplied material may be recorded in the
                <att>resp</att> attribute. The value of resp must point to one or more identifiers
              declared in the document header. The <att>cert</att> attribute signifies the degree of
              certainty ascribed to the supplied material.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>

        <!-- Fix rip articulation, issue #164; data.ARTICULATIONS is missing 'scoop', issue #204 -->
        <!-- Add scoop, shake, and longfall; revise documentation of rip, damp, dampall, and fall -->
        <macroSpec ident="data.ARTICULATION" module="MEI" type="dt" mode="replace">
          <desc>The following list of articulations mostly corresponds to symbols from the Western
            Musical Symbols portion of the Unicode Standard. The dot and stroke values may be used
            in cases where interpretation is difficult or undesirable.</desc>
          <content>
            <rng:choice>
              <rng:value>acc</rng:value>
              <a:documentation>accent (Unicode 1D17B)</a:documentation>
              <rng:value>stacc</rng:value>
              <a:documentation>staccato (Unicode 1D17C)</a:documentation>
              <rng:value>ten</rng:value>
              <a:documentation>tenuto (Unicode 1D17D)</a:documentation>
              <rng:value>stacciss</rng:value>
              <a:documentation>staccatissimo (Unicode 1D17E)</a:documentation>
              <rng:value>marc</rng:value>
              <a:documentation>marcato (Unicode 1D17F)</a:documentation>
              <rng:value>marc-stacc</rng:value>
              <a:documentation>marcato + staccato (Unicode 1D180)</a:documentation>
              <rng:value>spicc</rng:value>
              <a:documentation>spiccato</a:documentation>
              <rng:value>doit</rng:value>
              <a:documentation>main note followed by short slide to higher, indeterminate pitch
                (Unicode 1D185)</a:documentation>
              <rng:value>scoop</rng:value>
              <a:documentation>main note preceded by short slide from lower, indeterminate pitch
                (Unicode 1D186)</a:documentation>
              <rng:value>rip</rng:value>
              <a:documentation>main note preceded by long slide from lower, often indeterminate
                pitch; also known as "squeeze".</a:documentation>
              <rng:value>plop</rng:value>
              <a:documentation>main note preceded by "slide" from higher, indeterminate
                pitch</a:documentation>
              <rng:value>fall</rng:value>
              <a:documentation>main note followed by short "slide" to lower, indeterminate
                pitch</a:documentation>
              <rng:value>longfall</rng:value>
              <a:documentation>main note followed by long "slide" to lower, indeterminate
                pitch</a:documentation>
              <rng:value>bend</rng:value>
              <a:documentation>"lip slur" to lower pitch, then return to written
                pitch</a:documentation>
              <rng:value>flip</rng:value>
              <a:documentation>main note followed by quick upward rise, then descent in pitch
                (Unicode 1D187)</a:documentation>
              <rng:value>smear</rng:value>
              <a:documentation>(Unicode 1D188)</a:documentation>
              <rng:value>shake</rng:value>
              <a:documentation>alternation between written pitch and next highest overtone (brass
                instruments) or note minor third higher (woodwinds)</a:documentation>
              <rng:value>dnbow</rng:value>
              <a:documentation>down bow (Unicode 1D1AA)</a:documentation>
              <rng:value>upbow</rng:value>
              <a:documentation>up bow (Unicode 1D1AB)</a:documentation>
              <rng:value>harm</rng:value>
              <a:documentation>harmonic (Unicode 1D1AC)</a:documentation>
              <rng:value>snap</rng:value>
              <a:documentation>snap pizzicato (Unicode 1D1AD)</a:documentation>
              <rng:value>fingernail</rng:value>
              <a:documentation>fingernail (Unicode 1D1B3)</a:documentation>
              <rng:value>ten-stacc</rng:value>
              <a:documentation>tenuto + staccato (Unicode 1D182)</a:documentation>
              <rng:value>damp</rng:value>
              <a:documentation>stop harp string from sounding (Unicode 1D1B4)</a:documentation>
              <rng:value>dampall</rng:value>
              <a:documentation>stop all harp strings from sounding (Unicode 1D1B5)</a:documentation>
              <rng:value>open</rng:value>
              <a:documentation>full (as opposed to stopped) tone</a:documentation>
              <rng:value>stop</rng:value>
              <a:documentation>"muffled" tone</a:documentation>
              <rng:value>dbltongue</rng:value>
              <a:documentation>double tongue (Unicode 1D18A)</a:documentation>
              <rng:value>trpltongue</rng:value>
              <a:documentation>triple tongue (Unicode 1D18B)</a:documentation>
              <rng:value>heel</rng:value>
              <a:documentation>use heel (organ pedal)</a:documentation>
              <rng:value>toe</rng:value>
              <a:documentation>use toe (organ pedal)</a:documentation>
              <rng:value>tap</rng:value>
              <a:documentation>percussive effect on guitar string(s)</a:documentation>
              <rng:value>lhpizz</rng:value>
              <a:documentation>left-hand pizzicato</a:documentation>
              <rng:value>dot</rng:value>
              <a:documentation>uninterpreted dot</a:documentation>
              <rng:value>stroke</rng:value>
              <a:documentation>uninterpreted stroke</a:documentation>
            </rng:choice>
          </content>
        </macroSpec>

        <!-- Make control events members of att.typed, issue #166 -->
        <elementSpec ident="arpeg" module="MEI.cmn" mode="replace">
          <desc>(arpeggiation) – Indicates that the notes of a chord are to be performed
            successively rather than simultaneously, usually from lowest to highest. Sometimes
            called a "roll".</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.arpeg.log"/>
            <memberOf key="att.arpeg.vis"/>
            <memberOf key="att.arpeg.ges"/>
            <memberOf key="att.arpeg.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <remarks>
            <p>The modern arpeggiation symbol is a vertical wavy line preceding the chord. When the
              notes of the chord are to be performed from highest to lowest, an arrowhead may be
              added to the lower end of the line. Even though it is redundant, an arrowhead is
              sometimes added to the upper end of the line for the sake of consistency or when the
              direction of successive arpeggios alternates. In music for keyboard instruments,
              sometimes a distinction is made between a single arpeggio in which both hands play
              successively and simultaneous arpeggios in two hands. In the case of the former,
              multiple values may be required in the <att>staff</att> and <att>layer</att>
              attributes. Arpeggios that do not cross staves, but still involve more than one layer
              require multiple values for the <att>layer</att> attribute.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="bend" module="MEI.cmn" mode="replace">
          <desc>A variation in pitch (often micro-tonal) upwards or downwards during the course of a
            note.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.bend.log"/>
            <memberOf key="att.bend.vis"/>
            <memberOf key="att.bend.ges"/>
            <memberOf key="att.bend.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="bend_start-_and_end-type_attributes_required"
            scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:bend">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
                <sch:assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
                  attributes: dur, dur.ges, endid, or tstamp2</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
        <elementSpec ident="breath" module="MEI.cmn" mode="replace">
          <desc>(breath mark) – A indication of a point at which the performer on an instrument
            requiring breath (including the voice) may breathe.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.breath.log"/>
            <memberOf key="att.breath.vis"/>
            <memberOf key="att.breath.ges"/>
            <memberOf key="att.breath.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="breath_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:breath">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>This element may also indicate a short pause or break for instruments *not* requiring
              breath. Therefore, it often functions as a guide to phrasing. The usual sign for the
              breath mark is a comma; however, other visual forms of the breath mark may be
              indicated using the <att>altsym</att> attribute. The starting point of the breath mark
              may be indicated by either a <att>startid</att>, <att>tstamp</att>,
                <att>tstamp.ges</att>, or <att>tstamp.real</att> attribute. It is a semantic error
              not to specify a starting point attribute.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="fermata" module="MEI.cmn" mode="replace">
          <desc>An indication placed over a note or rest to indicate that it should be held longer
            than its written value. May also occur over a bar line to indicate the end of a phrase
            or section. Sometimes called a 'hold' or 'pause'.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.fermata.log"/>
            <memberOf key="att.fermata.vis"/>
            <memberOf key="att.fermata.ges"/>
            <memberOf key="att.fermata.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="fermata_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:fermata">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The <gi scheme="MEI">fermata</gi> element is a specialized form of, i.e., syntactic
              sugar for, dir/@type="fermata" with &amp;ferm; or &amp;uferm; as its PCDATA content.
              The <att>shape</att> attribute may be used to record whether the fermata is curved or
              square. Other visual forms of a fermata may be indicated via the <att>altsym</att>
              attribute. The starting point of the fermata may be indicated by either a
                <att>startid</att>, <att>tstamp</att>, <att>tstamp.ges</att>, or
                <att>tstamp.real</att> attribute. It is a semantic error not to specify a starting
              point attribute.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="hairpin" module="MEI.cmn" mode="replace">
          <desc>Indicates continuous dynamics expressed on the score as wedge-shaped graphics, e.g.
            &lt; and &gt;.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.hairpin.log"/>
            <memberOf key="att.hairpin.vis"/>
            <memberOf key="att.hairpin.ges"/>
            <memberOf key="att.hairpin.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="hairpin_start-_and_end-type_attributes_required"
            scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:hairpin">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
                <sch:assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
                  attributes: dur, dur.ges, endid, or tstamp2</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The <gi scheme="MEI">hairpin</gi> element is used for <emph>graphical</emph>, i.e.,
              crescendo and diminuendo, dynamic markings. For instantaneous or continuous
                <emph>textual</emph> dynamics, such as 'p', 'mf', or 'cres. poco a poco', the <gi
                scheme="MEI">dynam</gi> element should be used. The starting point of the hairpin
              marking may be indicated by either a <att>startid</att>, <att>tstamp</att>,
                <att>tstamp.ges</att>, or <att>tstamp.real</att> attribute, while the ending point
              may be recorded by either a <att>dur</att>, <att>dur.ges</att>, <att>endid</att>, or
                <att>tstamp2</att> attribute. It is a semantic error not to specify one starting and
              one ending type of attribute. MIDI values associated with the graphical dynamic sign
              may be recorded in the <att>val</att> and <att>val2</att> attributes.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="harm" module="MEI.harmony" mode="replace">
          <desc>(harmony) – An indication of harmony, e.g., chord names, tablature grids, harmonic
            analysis, figured bass.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.harm.log"/>
            <memberOf key="att.harm.vis"/>
            <memberOf key="att.harm.ges"/>
            <memberOf key="att.harm.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.harmLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
                <rng:ref name="model.graphicprimitiveLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.figbassLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="harm_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:harm">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
        <elementSpec ident="harpPedal" module="MEI.cmn" mode="replace">
          <desc>(harp pedal) – Harp pedal diagram.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.harpPedal.log"/>
            <memberOf key="att.harpPedal.vis"/>
            <memberOf key="att.harpPedal.ges"/>
            <memberOf key="att.harpPedal.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="harpPedal_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:harpPedal">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The starting point of the harp pedal diagram may be indicated by either a
                <att>tstamp</att>, <att>tstamp.ges</att>, <att>tstamp.real</att> or
                <att>startid</att> attribute. It is a semantic error not to specify a starting point
              attribute.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="mordent" module="MEI.cmnOrnaments" mode="replace">
          <desc>An ornament indicating rapid alternation of the main note with a secondary note,
            usually a step below, but sometimes a step above. <!--See Read, p. 245-246.-->
          </desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.mordent.log"/>
            <memberOf key="att.mordent.vis"/>
            <memberOf key="att.mordent.ges"/>
            <memberOf key="att.mordent.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.ornamentLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="mordent_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:mordent">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The starting point of the mordent may be indicated by either a <att>startid</att>,
                <att>tstamp</att>, <att>tstamp.ges</att>, or <att>tstamp.real</att> attribute. It is
              a semantic error not to specify one of these attributes.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="octave" module="MEI.cmn" mode="replace">
          <desc>An indication that a passage should be performed one or more octaves above or below
            its written pitch.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.octave.log"/>
            <memberOf key="att.octave.vis"/>
            <memberOf key="att.octave.ges"/>
            <memberOf key="att.octave.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="octave_start-_and_end-type_attributes_required"
            scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:octave">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
                <sch:assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
                  attributes: dur, dur.ges, endid, or tstamp2</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The <att>dis</att> and <att>dis.place</att> attributes record the amount and
              direction of displacement, respectively. The <att>lform</att> and <att>lwidth</att>
              attributes capture the appearance of the continuation line associated with the octave
              displacement. The starting point of the octave displacement may be indicated by either
              a <att>startid</att>, <att>tstamp</att>, <att>tstamp.ges</att>, or
                <att>tstamp.real</att> attribute, while the ending point may be recorded by either a
                <att>dur</att>, <att>dur.ges</att>, <att>endid</att>, or <att>tstamp2</att>
              attribute. It is a semantic error not to specify one starting and one ending type of
              attribute. Also, note that the <att>dur</att> attribute is not required because the
              octave displacement can be visually instantaneous.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="pedal" module="MEI.cmn" mode="replace">
          <desc>Piano pedal mark. <!-- (Read, p. 317-318). --></desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.pedal.log"/>
            <memberOf key="att.pedal.vis"/>
            <memberOf key="att.pedal.ges"/>
            <memberOf key="att.pedal.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="pedal_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:pedal">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The starting point of the pedal mark may be indicated by either a <att>startid</att>,
                <att>tstamp</att>, <att>tstamp.ges</att>, or <att>tstamp.real</att> attribute. It is
              a semantic error not to specify one of these attributes.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="phrase" module="MEI.shared" mode="replace">
          <desc>Indication of 1) a "unified melodic idea" or 2) performance technique.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.phrase.log"/>
            <memberOf key="att.phrase.vis"/>
            <memberOf key="att.phrase.ges"/>
            <memberOf key="att.phrase.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="phrase_start-_and_end-type_attributes_required"
            scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:phrase">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
                <sch:assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
                  attributes: dur, dur.ges, endid, or tstamp2</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>Historically, a phrase mark indicated a "unified melodic idea", while the term "slur"
              was used for two-note legato patterns. (Read, p. 265). Nowadays, however, "phrase" and
              "slur" are often used interchangeably (Read, p. 265-266), since the visual rendition
              of the two concepts is the same. MEI provides two distinct elements so that those
              users wishing to maintain a distinction for historical reasons may do so. If the user
              does not want to maintain the distinction, then the more generic <gi scheme="MEI"
                >slur</gi> element should be employed. The starting point of the phrase may be
              indicated by either a <att>startid</att>, <att>tstamp</att>, <att>tstamp.ges</att>, or
                <att>tstamp.real</att> attribute, while the ending point may be recorded by either a
                <att>dur</att>, <att>dur.ges</att>, <att>endid</att>, or <att>tstamp2</att>
              attribute. It is a semantic error not to specify one starting and one ending type of
              attribute. Either <att>place</att>, <att>bulge</att>, or <att>bezier</att> attributes
              may be used to record the curvature of the phrase.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="reh" module="MEI.cmn" mode="replace">
          <desc>(rehearsal mark) – In an orchestral score and its corresponding parts, a mark
            indicating a convenient point from which to resume rehearsal after a break.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.reh.log"/>
            <memberOf key="att.reh.vis"/>
            <memberOf key="att.reh.ges"/>
            <memberOf key="att.reh.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike.cmn"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.lbLike"/>
                <rng:ref name="model.rendLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>It may also be called a "rehearsal figure", or when numbers are used instead of
              letters, a "rehearsal number". See Read, p. 443. <gi scheme="MEI">reh</gi> uses a
              subset of model.textphraseLike.limited.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="slur" module="MEI.cmn" mode="replace">
          <desc>Indication of 1) a "unified melodic idea" or 2) performance technique.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.slur.log"/>
            <memberOf key="att.slur.vis"/>
            <memberOf key="att.slur.ges"/>
            <memberOf key="att.slur.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="slur_start-_and_end-type_attributes_required"
            scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:slur">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
                <sch:assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
                  attributes: dur, dur.ges, endid, or tstamp2</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>Historically, the term "slur" indicated two notes performed legato, while the term
              "phrase" was used for a "unified melodic idea". Nowadays, however, "slur" often has
              the same meaning as "phrase" (See Read, p. 265-266), since the visual rendition of the
              two concepts is the same. MEI provides two distinct elements so that those users
              wishing to maintain a distinction for historical reasons may do so. If the user does
              not want to maintain the distinction, then the more generic <gi scheme="MEI">slur</gi>
              element should be employed. The starting point of the slur may be indicated by either
              a <att>startid</att>, <att>tstamp</att>, <att>tstamp.ges</att>, or
                <att>tstamp.real</att> attribute, while the ending point may be recorded by either a
                <att>dur</att>, <att>dur.ges</att>, <att>endid</att>, or <att>tstamp2</att>
              attribute. It is a semantic error not to specify one starting and one ending type of
              attribute. Either <att>place</att>, <att>bulge</att>, or <att>bezier</att> attributes
              may be used to record the curvature of the slur. The <gi scheme="MEI">slur</gi> and
                <gi scheme="MEI">tie</gi> elements may be used instead of the slur.* and tie.*
              attributes provided on <gi scheme="MEI">chord</gi> and <gi scheme="MEI">note</gi>
              elements when 1) they are required by software, or 2) multiple, alternative slurs are
              needed.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="tempo" module="MEI.shared" mode="replace">
          <desc>Text and symbols descriptive of tempo, mood, or style, e.g., "allarg.", "a tempo",
            "cantabile", "Moderato", "♩=60", "Moderato ♩ =60").</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.tempo.log"/>
            <memberOf key="att.tempo.vis"/>
            <memberOf key="att.tempo.ges"/>
            <memberOf key="att.tempo.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike"/>
            <memberOf key="model.workIdent"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
                <rng:ref name="model.graphicprimitiveLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="tempo_in_header_disallow_most_attrs" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:tempo[ancestor::mei:meiHead]">
                <sch:assert
                  test="not(@*[name() != 'label' and name() != 'n' and name() !=
                  'xml:base' and name() != 'xml:id' and name() != 'xml:lang'])"
                  >Only label, n, xml:base, xml:id, and xml:lang attributes allowed when this
                  element occurs in the header.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="tempo_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule
                context="mei:tempo[not(ancestor::mei:syllable) and
                not(ancestor::mei:meiHead)]">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
        <elementSpec ident="tie" module="MEI.cmn" mode="replace">
          <desc>An indication that two notes of the same pitch form a single note with their
            combined rhythmic values.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.tie.log"/>
            <memberOf key="att.tie.vis"/>
            <memberOf key="att.tie.ges"/>
            <memberOf key="att.tie.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="tie_start-_and_end-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:tie">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
                <sch:assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
                  attributes: dur, dur.ges, endid, or tstamp2</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>Most often, a tie is rendered as a curved line connecting the two notes. See Read, p.
              110-111, 122.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="trill" module="MEI.cmnOrnaments" mode="replace">
          <desc>Rapid alternation of a note with another (usually at the interval of a second
            above).</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.trill.log"/>
            <memberOf key="att.trill.vis"/>
            <memberOf key="att.trill.ges"/>
            <memberOf key="att.trill.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.ornamentLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="trill_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:trill">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The interval between the main and auxiliary notes is usually understood to be
              diatonic unless altered by an accidental. The starting note of the trill; i.e., the
              written one or the ornamenting one, and the speed of alternation depends on
              performance practice. The starting point of the trill may be indicated by either a
                <att>startid</att>, <att>tstamp</att>, <att>tstamp.ges</att>, or
                <att>tstamp.real</att> attribute, while the ending point may be recorded by either a
                <att>dur</att>, <att>dur.ges</att>, <att>endid</att>, or <att>tstamp2</att>
              attribute. It is a semantic error not to specify a starting point attribute.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="turn" module="MEI.cmnOrnaments" mode="replace">
          <desc>An ornament consisting of four notes — the upper neighbor of the written note, the
            written note, the lower neighbor, and the written note.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.turn.log"/>
            <memberOf key="att.turn.vis"/>
            <memberOf key="att.turn.ges"/>
            <memberOf key="att.turn.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.ornamentLike.cmn"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="turn_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:turn">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>See Read, p. 246-247. Whether the turn is accented or unaccented may be inferred from
              the timestamp — accented turns occur directly on the affected beat, unaccented ones do
              not.</p>
          </remarks>
        </elementSpec>

        <!-- Make <breath> a member of att.typography, issue #167 -->
        <classSpec ident="att.breath.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>

        <!-- Add quarter-tone accidentals, issue #168 -->
        <macroSpec ident="data.ACCIDENTAL.EXPLICIT" module="MEI" type="dt" mode="replace">
          <desc>Accidental attribute values.</desc>
          <content>
            <rng:choice>
              <rng:value>s</rng:value>
              <a:documentation>sharp</a:documentation>
              <rng:value>f</rng:value>
              <a:documentation>flat</a:documentation>
              <rng:value>ss</rng:value>
              <a:documentation>double sharp (written as 2 sharps)</a:documentation>
              <rng:value>x</rng:value>
              <a:documentation>double sharp (written using croix)</a:documentation>
              <rng:value>ff</rng:value>
              <a:documentation>double flat</a:documentation>
              <rng:value>xs</rng:value>
              <a:documentation>triple sharp (written as croix and 2 sharps)</a:documentation>
              <rng:value>ts</rng:value>
              <a:documentation>triple sharp (written as 3 sharps)</a:documentation>
              <rng:value>tf</rng:value>
              <a:documentation>triple flat</a:documentation>
              <rng:value>n</rng:value>
              <a:documentation>natural</a:documentation>
              <rng:value>nf</rng:value>
              <a:documentation>natural + flat; used to cancel preceding double
                flat</a:documentation>
              <rng:value>ns</rng:value>
              <a:documentation>natural + sharp; used to cancel preceding double
                sharp</a:documentation>
              <!-- su, sd, fu, fd are equivalent to usual symbols plus an arrow (Gould, p. 95)-->
              <rng:value>su</rng:value>
              <a:documentation>sharp note raised by quarter tone (sharp modified by
                arrow)</a:documentation>
              <rng:value>sd</rng:value>
              <a:documentation>sharp note lowered by quarter tone (sharp modified by
                arrow)</a:documentation>
              <rng:value>fu</rng:value>
              <a:documentation>flat note raised by quarter tone (flat modified by
                arrow)</a:documentation>
              <rng:value>fd</rng:value>
              <a:documentation>flat note lowered by quarter tone (flat modified by
                arrow)</a:documentation>
              <rng:value>nu</rng:value>
              <a:documentation>natural note raised by quarter tone (natural modified by
                arrow)</a:documentation>
              <rng:value>nd</rng:value>
              <a:documentation>natural note lowered by quarter tone (natural modified by
                arrow)</a:documentation>
              <!-- 1qf, 3qf, 1qs, 3qs represent fixed symbols (Gould, p. 96) -->
              <rng:value>1qf</rng:value>
              <a:documentation>1/4-tone flat accidental</a:documentation>
              <rng:value>3qf</rng:value>
              <a:documentation>3/4-tone flat accidental</a:documentation>
              <rng:value>1qs</rng:value>
              <a:documentation>1/4-tone sharp accidental</a:documentation>
              <rng:value>3qs</rng:value>
              <a:documentation>3/4-tone sharp accidental</a:documentation>
            </rng:choice>
          </content>
          <remarks>
            <p><graphic
                url="https://music-encoding.googlecode.com/svn/trunk/source/guidelines/Images/ExampleImages/accid-20100510.png"
                height="50%" width="50%"/>
            </p>
          </remarks>
        </macroSpec>
        <!-- Rewrite pattern spec for key.sig.mixed -->
        <!-- THIS CHANGE BREAKS BACKWARD COMPATIBILITY! -->
        <classSpec ident="att.keySigDefault.log" module="MEI.shared" type="atts" mode="replace">
          <desc>Used by staffDef and scoreDef to provide default values for attributes in the
            logical domain related to key signatures.</desc>
          <attList>
            <attDef ident="key.accid" usage="opt">
              <desc>contains an accidental for the tonic key, if one is required, e.g., if key.pname
                equals 'c' and key.accid equals 's', then a tonic of C# is indicated.</desc>
              <datatype>
                <rng:ref name="data.ACCIDENTAL.IMPLICIT"/>
              </datatype>
            </attDef>
            <attDef ident="key.mode" usage="opt">
              <desc>indicates major, minor, or other tonality.</desc>
              <datatype>
                <rng:ref name="data.MODE"/>
              </datatype>
            </attDef>
            <attDef ident="key.pname" usage="opt">
              <desc>holds the pitch name of the tonic key, e.g. 'c' for the key of C.</desc>
              <datatype>
                <rng:ref name="data.PITCHNAME"/>
              </datatype>
            </attDef>
            <attDef ident="key.sig" usage="opt">
              <desc>indicates where the key lies in the circle of fifths.</desc>
              <datatype>
                <rng:ref name="data.KEYSIGNATURE"/>
              </datatype>
            </attDef>
            <attDef ident="key.sig.mixed" usage="opt">
              <desc>Mixed key signatures, e.g. those consisting of a mixture of flats and sharps
                (Read, p. 143, ex. 9-39), and key signatures with unorthodox placement of the
                accidentals (Read, p. 141) must be indicated by setting the key.sig attribute to
                'mixed' and providing explicit key signature information in the key.sig.mixed
                attribute or in the &lt;keySig&gt; element. It is intended that key.sig.mixed
                contain a series of tokens with each token containing pitch name, accidental, and
                octave, such as 'bf3 an4 cs5 etf5' that indicate what key accidentals should be
                rendered and where they should be placed.</desc>
              <datatype>
                <rng:list>
                  <rng:oneOrMore>
                    <rng:data type="token">
                      <rng:param name="pattern"
                        >[a-g](s|f|ss|x|ff|xs|ts|tf|n|nf|ns|su|sd|fu|fd|nu|nd|1qf|3qf|1qs|3qs)[0-9]</rng:param>
                    </rng:data>
                  </rng:oneOrMore>
                </rng:list>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <!-- Enhancement of bend, issue #169 -->
        <macroSpec ident="data.BEND.AMOUNT" module="MEI" type="dt" mode="replace">
          <desc>Either an integer value, a decimal value, or a token. Fractional values are limited
            to .25, .5, .75, while the token value is restricted to 'full'.</desc>
          <content>
            <rng:choice>
              <rng:data type="decimal">
                <rng:param name="pattern">\.25|\.5|\.75</rng:param>
              </rng:data>
              <rng:data type="decimal">
                <rng:param name="pattern">[0-9](\.25|\.5|\.75)?</rng:param>
              </rng:data>
              <rng:data type="token">
                <rng:param name="pattern">full</rng:param>
              </rng:data>
            </rng:choice>
          </content>
        </macroSpec>

        <!-- Add ending value for dynam, issue #172 -->
        <classSpec ident="att.midivalue2" module="MEI.midi" type="atts" mode="add">
          <desc>Attributes that record terminal MIDI values.</desc>
          <attList>
            <attDef ident="val2" usage="opt">
              <desc>MIDI number.</desc>
              <datatype>
                <rng:ref name="data.MIDIVALUE"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.dynam.ges" module="MEI.shared" type="atts" mode="replace">
          <desc>Gestural domain attributes.</desc>
          <classes>
            <memberOf key="att.duration.performed"/>
            <memberOf key="att.midivalue"/>
            <memberOf key="att.midivalue2"/>
          </classes>
        </classSpec>
        <elementSpec ident="dynam" module="MEI.shared" mode="replace">
          <desc>(dynamic) – Indication of the volume of a note, phrase, or section of music.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.dynam.log"/>
            <memberOf key="att.dynam.vis"/>
            <memberOf key="att.dynam.ges"/>
            <memberOf key="att.dynam.anl"/>
            <!-- Make control events members of att.typed, issue #166 -->
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="dynam_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:dynam">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real"> Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="dynam_end-type_attributes" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:dynam[@val2]">
                <sch:assert test="@dur or @dur.ges or @endid or @tstamp2">When @val2 is present,
                  either @dur, @dur.ges, @endid, or @tstamp2 must also be present.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>This element may be used for instantaneous or continuous <emph>textual</emph>
              dynamics, e.g. 'p', 'mf', or 'cresc. poco a poco'. The <gi scheme="MEI">hairpin</gi>
              element should be used for <emph>graphical</emph>, i.e., crescendo and diminuendo,
              dynamic markings. The starting point of the dynamic marking may be indicated by either
              a <att>startid</att>, <att>tstamp</att>, <att>tstamp.ges</att>, or
                <att>tstamp.real</att> attribute, while the ending point may be recorded by either a
                <att>dur</att>, <att>dur.ges</att>, <att>endid</att>, or <att>tstamp2</att>
              attribute. It is a semantic error not to specify a starting point attribute. MIDI
              values associated with the graphical dynamic sign may be recorded in the
                <att>val</att> and <att>val2</att> attributes.</p>
          </remarks>
        </elementSpec>
        <classSpec ident="att.hairpin.ges" module="MEI.cmn" type="atts" mode="replace">
          <desc>Gestural domain attributes.</desc>
          <classes>
            <memberOf key="att.duration.performed"/>
            <memberOf key="att.midivalue"/>
            <memberOf key="att.midivalue2"/>
          </classes>
        </classSpec>

        <!-- Use of tstamp.ges, issue #177 -->
        <!-- Change datatype of @tstamp.ges -->
        <classSpec ident="att.timestamp.performed" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that record a performed (as opposed to notated) time stamp.</desc>
          <attList>
            <attDef ident="tstamp.ges" usage="opt">
              <desc>captures performed onset time in several forms; that is, ppq (MIDI clicks and
                MusicXML 'divisions'), Humdrum **recip values, beats, seconds, or mensural duration
                values.</desc>
              <datatype>
                <rng:ref name="data.DURATION.gestural"/>
              </datatype>
            </attDef>
            <!-- Remove @tstamp.real? -->
            <attDef ident="tstamp.real" usage="opt">
              <desc>used to record the onset time in terms of ISO time.</desc>
              <datatype>
                <rng:ref name="data.ISOTIME"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <!-- Facilitate overlapping staff groups, issue #178 -->
        <elementSpec ident="grpSym" module="MEI.shared" mode="replace">
          <desc>(group symbol) – A brace or bracket used to group two or more staves of a score or
            part.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.grpSym.log"/>
            <memberOf key="att.grpSym.vis"/>
            <memberOf key="att.grpSym.ges"/>
            <memberOf key="att.grpSym.anl"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.labelLike"/>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="check_grpSym_attributes_scoreDef" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:grpSym[parent::mei:scoreDef]">
                <sch:assert test="@startid and @endid and @level">In this context, grpSym must have
                  startid, endid, and level attributes.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="check_grpSym_attributes_staffDef" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:grpSym[parent::mei:staffGrp]">
                <sch:assert test="not(@startid or @endid or @level)">In this context, grpSym must
                  not have startid, endid, or level attributes.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>This element provides an alternative to the <gi scheme="MEI">staffGrp</gi> element's
                <att>symbol</att> attribute. It may be used when exact placement or editorial
              details for the grouping symbol must be recorded.</p>
          </remarks>
        </elementSpec>
        <classSpec ident="att.grpSym.log" module="MEI.shared" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.staffgroupingsym"/>
            <memberOf key="att.startendid"/>
          </classes>
          <attList>
            <attDef ident="level" usage="opt">
              <desc>Indicates the nesting level of staff grouping symbols.</desc>
              <datatype>
                <rng:data type="positiveInteger"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <!-- Harmonize content model of <fw> and <pgHead>, <pgFoot>, etc., issue #179 -->
        <elementSpec ident="fw" module="MEI.shared" mode="replace">
          <desc>(forme work) – Captures header/footer material that is non-repeating; that is,
            occuring on isolated pages. For recurring headers and footers use pgHead* and pgFoot*
            elements.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.metaLike.page"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textcomponentLike"/>
                <rng:ref name="model.textphraseLike.limited"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.appLike"/>
                <rng:ref name="anchoredText"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>

        <!-- Modify @symbol values on grpSym, issue #180 -->
        <!-- THIS CHANGE BREAKS BACKWARD COMPATIBILITY! -->
        <classSpec ident="att.staffgroupingsym" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that describe the symbol used to group a set of staves.</desc>
          <attList>
            <attDef ident="symbol" usage="opt">
              <desc>specifies the symbol used to group a set of staves.</desc>
              <valList type="closed">
                <valItem ident="brace">
                  <desc>curved symbol, i.e., {.</desc>
                </valItem>
                <valItem ident="bracket">
                  <desc>square symbol, i.e., [, but with curved/angled top and bottom
                    segments.</desc>
                </valItem>
                <valItem ident="bracketsq">
                  <desc>square symbol, i.e., [, with horizontal top and bottom segments.</desc>
                </valItem>
                <valItem ident="line">
                  <desc>line symbol, i.e., |, (wide) line without top and bottom curved/horizontal
                    segments.</desc>
                </valItem>
                <valItem ident="none">
                  <desc>grouping symbol missing.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>

        <!-- Make verse a member of att.color, issue #181 -->
        <classSpec ident="att.verse.vis" module="MEI.lyrics" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset.to"/>
            <memberOf key="att.visualoffset.vo"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>

        <!-- Revise staff grouping symbols, issue #182 -->
        <!-- Break att.scoreDef.* into more atomic units, issue #115 -->
        <classSpec ident="att.endings" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that record ending style information</desc>
          <attList>
            <attDef ident="ending.rend" usage="opt">
              <desc>describes where ending marks should be displayed.</desc>
              <valList type="closed">
                <valItem ident="top">
                  <desc>ending rendered only above top staff.</desc>
                </valItem>
                <valItem ident="barred">
                  <desc>ending rendered above staves that have bar lines drawn across them.</desc>
                </valItem>
                <valItem ident="grouped">
                  <desc>endings rendered above staff groups.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.measurenumbers" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes pertaining to measure numbers</desc>
          <attList>
            <attDef ident="mnum.visible" usage="opt">
              <desc>indicates whether measure numbers should be displayed.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.notationstyle" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that capture music font name and size.</desc>
          <attList>
            <attDef ident="music.name" usage="opt">
              <desc>sets the default music font name.</desc>
              <datatype>
                <rng:ref name="data.MUSICFONT"/>
              </datatype>
            </attDef>
            <attDef ident="music.size" usage="opt">
              <desc>sets the default music font size.</desc>
              <datatype>
                <rng:ref name="data.FONTSIZE"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.optimization" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes pertaining to layout optimization.</desc>
          <attList>
            <attDef ident="optimize" usage="opt">
              <desc>indicates whether staves without notes, rests, etc. should be displayed. When
                the value is 'true', empty staves are displayed.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.pages" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that record page-level layout information.</desc>
          <attList>
            <attDef ident="page.height" usage="opt">
              <desc>specifies the height of the page; may be expressed in real-world units or staff
                steps.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="page.width" usage="opt">
              <desc>describes the width of the page; may be expressed in real-world units or staff
                steps.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="page.topmar" usage="opt">
              <desc>indicates the amount of whitespace at the top of a page.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="page.botmar" usage="opt">
              <desc>indicates the amount of whitespace at the bottom of a page.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="page.leftmar" usage="opt">
              <desc>indicates the amount of whitespace at the left side of a page.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="page.rightmar" usage="opt">
              <desc>indicates the amount of whitespace at the right side of a page.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="page.panels" usage="opt">
              <desc>indicates the number of logical pages to be rendered on a single physical
                page.</desc>
              <datatype>
                <rng:ref name="data.PAGE.PANELS"/>
              </datatype>
            </attDef>
            <attDef ident="page.scale" usage="opt">
              <desc>indicates how the page should be scaled when rendered.</desc>
              <datatype>
                <rng:ref name="data.PGSCALE"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.spacing" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that capture notation spacing information.</desc>
          <attList>
            <attDef ident="spacing.packexp" usage="opt">
              <desc>describes a note's spacing relative to its time value.</desc>
              <datatype>
                <rng:data type="decimal"/>
              </datatype>
            </attDef>
            <attDef ident="spacing.packfact" usage="opt">
              <desc>describes the note spacing of output.</desc>
              <datatype>
                <rng:data type="decimal"/>
              </datatype>
            </attDef>
            <attDef ident="spacing.staff" usage="opt">
              <desc>specifies the minimum amount of space between adjacent staves in the same
                system; measured from the bottom line of the staff above to the top line of the
                staff below.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="spacing.system" usage="opt">
              <desc>describes the space between adjacent systems; a pair of space-separated values
                (minimum and maximum, respectively) provides a range between which a rendering
                system-supplied value may fall, while a single value indicates a fixed amount of
                space; that is, the minimum and maximum values are equal.</desc>
              <datatype>
                <rng:list>
                  <rng:ref name="data.MEASUREMENT"/>
                </rng:list>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add @system.leftline for score-wide specification of left line -->
        <classSpec ident="att.systems" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that capture system layout information.</desc>
          <attList>
            <attDef ident="system.leftline" usage="opt">
              <desc>indicates whether the staves are joined at the left by a continuous line. The
                default value is "true". Do not confuse this with the heavy vertical line used as a
                grouping symbol.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
            <attDef ident="system.leftmar" usage="opt">
              <desc>describes the amount of whitespace at the left system margin relative to
                page.leftmar.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="system.rightmar" usage="opt">
              <desc>describes the amount of whitespace at the right system margin relative to
                page.rightmar.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="system.topmar" usage="opt">
              <desc>describes the distance from page's top edge to the first system; used for first
                page only.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.scoreDef.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes for scoreDef in the CMN repertoire.</desc>
          <classes>
            <memberOf key="att.barplacement"/>
            <memberOf key="att.cleffing.vis"/>
            <memberOf key="att.distances"/>
            <memberOf key="att.endings"/>
            <memberOf key="att.keySigDefault.vis"/>
            <memberOf key="att.lyricstyle"/>
            <memberOf key="att.measurenumbers"/>
            <memberOf key="att.meterSigDefault.vis"/>
            <memberOf key="att.multinummeasures"/>
            <memberOf key="att.notationstyle"/>
            <memberOf key="att.onelinestaff"/>
            <memberOf key="att.optimization"/>
            <memberOf key="att.pages"/>
            <memberOf key="att.spacing"/>
            <memberOf key="att.systems"/>
            <memberOf key="att.textstyle"/>
            <memberOf key="att.scoreDef.vis.cmn"/>
            <memberOf key="att.scoreDef.vis.mensural"/>
          </classes>
          <attList>
            <attDef ident="vu.height" usage="opt">
              <desc>defines the height of a "virtual unit" (vu) in terms of real-world units. A
                single vu is half the distance between the vertical center point of a staff line and
                that of an adjacent staff line.</desc>
              <datatype>
                <rng:data type="token">
                  <!-- px and vu are *not* allowed here -->
                  <rng:param name="pattern">\d+(\.\d+)?(cm|mm|in|pt|pc)</rng:param>
                </rng:data>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <!-- Revise description of title/@level, issue #184 -->
        <!-- Method for capturing non-filing part of title/name, issue #185 -->
        <!-- Add att.filing class -->
        <classSpec ident="att.filing" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that deal with string filing characteristics.</desc>
          <attList>
            <attDef ident="nonfiling" usage="opt">
              <desc>holds the number of initial characters (such as those constituing an article or
                preposition) that should not be used for sorting a title or name.</desc>
              <datatype>
                <rng:data type="positiveInteger"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-- Make att.name a member of att.filing -->
        <!-- Enforce constraints on attribute targets, issue #226 -->
        <classSpec ident="att.name" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes shared by names.</desc>
          <classes>
            <memberOf key="att.authorized"/>
            <memberOf key="att.canonical"/>
            <memberOf key="att.filing"/>
          </classes>
          <attList>
            <attDef ident="nymref" usage="opt">
              <desc>used to record a pointer to the regularized form of the name elsewhere in the
                document.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_instrTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@nymref">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@nymref
                      attribute has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*/@xml:id"
                      >The value in @nymref must correspond to the @xml:id attribute of an
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="role" usage="opt">
              <desc>used to specify further information about the entity referenced by this name,
                for example, the occupation of a person or the status of a place.</desc>
              <datatype>
                <rng:text/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-- Make <title> a member of att.filing -->
        <elementSpec ident="title" module="MEI.shared" mode="replace">
          <desc>Title of a bibliographic entity.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.canonical"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.filing"/>
            <memberOf key="att.lang"/>
            <!--<memberOf key="att.typed"/>-->
            <memberOf key="model.titleLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="level" usage="opt">
              <desc>indicates the bibliographic level for a title.</desc>
              <valList type="closed">
                <valItem ident="a">
                  <desc>analyzed component, such as an article or chapter, within a larger
                    bibliographic entity.</desc>
                </valItem>
                <valItem ident="m">
                  <desc>monograph.</desc>
                </valItem>
                <valItem ident="j">
                  <desc>journal.</desc>
                </valItem>
                <valItem ident="s">
                  <desc>series.</desc>
                </valItem>
                <valItem ident="u">
                  <desc>unpublished (including theses and dissertations unless published by a
                    commercial press).</desc>
                </valItem>
              </valList>
            </attDef>
            <!-- att.typed (@type and @subtype) expanded here to encourage use of recommended type values -->
            <attDef ident="type" usage="opt">
              <desc>characterizes the element in some sense, using any convenient classification
                scheme or typology.</desc>
              <valList type="semi">
                <valItem ident="main">
                  <desc>main title.</desc>
                </valItem>
                <valItem ident="subordinate">
                  <desc>subtitle or title of part.</desc>
                </valItem>
                <valItem ident="abbreviated">
                  <desc>abbreviated form of title.</desc>
                </valItem>
                <valItem ident="alternative">
                  <desc>alternate title by which the item is also known.</desc>
                </valItem>
                <valItem ident="translated">
                  <desc>translated form of title.</desc>
                </valItem>
                <valItem ident="uniform">
                  <desc>collective title.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="subtype" usage="opt">
              <desc>provide any sub-classification for the element, additional to that given by its
                type attribute.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
              <constraintSpec ident="When_subtype" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:*[@subtype]">
                    <sch:assert test="@type">An element with a subtype attribute must have a type
                      attribute.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>type</att> attribute may be used to classify the title according to some
              convenient typology. Sample values include: main (main title), subordinate (subtitle,
              title of part), abbreviated (abbreviated form of title), alternative (alternate title
              by which the work is also known), translated (translated form of title), uniform
              (collective title). The <att>type</att> attribute is provided for convenience in
              analysing titles and processing them according to their type; where such specialized
              processing is not necessary, there is no need for such analysis, and the entire title,
              including subtitles and any parallel titles, may be enclosed within a single <gi
                scheme="MEI">title</gi> element. Title parts may be encoded in <gi scheme="MEI"
                >title</gi> sub-elements. The name of the list from which a controlled value is
              taken may be recorded using the <att>authority</att> attribute. The number of initial
              characters (such as those constituing an article or preposition) that should not be
              used for sorting a title or name may be indicated in the <att>nonfiling</att>
              attribute.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>

        <!-- Head not permitted in projectDesc, issue #187. Also make head available in other 
          children of encodingDesc (appInfo, editorialDecl, and samplingDesc) and other list-like
          and grouping header elements (classification, componentGrp, expressionList, itemList,
          langUsage, relationList). -->
        <elementSpec ident="appInfo" module="MEI.header" mode="replace">
          <desc>(application information) – Groups information about applications which have acted
            upon the MEI file.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="model.encodingPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="application"/>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>Applications in this context is not to be confused with applications which were used
              to create the MEI file. The latter may be recorded in the <gi scheme="MEI"
                >projectDesc</gi> element.</p>
          </remarks>
          <remarks>
            <p> This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="projectDesc" module="MEI.header" mode="replace">
          <desc>(project description) – Project-level meta-data describing the aim or purpose for
            which the electronic file was encoded, funding agencies, etc. together with any other
            relevant information concerning the process by which it was assembled or
            collected.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.encodingPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:ref name="model.pLike"/>
            </rng:oneOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="editorialDecl" module="MEI.header" mode="replace">
          <desc>(editorial declaration) – Used to provide details of editorial principles and
            practices applied during the encoding of musical text.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.encodingPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:choice>
              <rng:oneOrMore>
                <rng:ref name="model.pLike"/>
              </rng:oneOrMore>
              <rng:group>
                <rng:oneOrMore>
                  <rng:ref name="model.editorialDeclPart"/>
                </rng:oneOrMore>
                <rng:zeroOrMore>
                  <rng:ref name="model.pLike"/>
                </rng:zeroOrMore>
              </rng:group>
            </rng:choice>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="samplingDecl" module="MEI.header" mode="replace">
          <desc>(sampling declaration) – Contains a prose description of the rationale and methods
            used in sampling texts in the creation of a corpus or collection.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.encodingPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:ref name="model.pLike"/>
            </rng:oneOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="classification" module="MEI.header" mode="replace">
          <desc>Groups information which describes the nature or topic of an entity.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.datapointing"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:choice>
                <rng:ref name="classCode"/>
                <rng:ref name="termList"/>
              </rng:choice>
            </rng:oneOrMore>
          </content>
          <remarks>
            <p>Although the use of names and terms from locally controlled vocabularies is possible,
              best practice suggests that terms should come from standard national or international
              vocabularies whenever they are available in order to enable searches in systems that
              include multiple MEI documents, or MEI documents and bibliographic records from many
              institutions.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="componentGrp" module="MEI.frbr" mode="replace">
          <desc>(component group) – Container for components of a bibliographic entity.</desc>
          <classes>
            <memberOf key="att.common"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:choice>
              <rng:zeroOrMore>
                <rng:ref name="model.workLike"/>
              </rng:zeroOrMore>
              <rng:zeroOrMore>
                <rng:ref name="model.expressionLike"/>
              </rng:zeroOrMore>
              <rng:zeroOrMore>
                <rng:ref name="model.manifestationLike"/>
              </rng:zeroOrMore>
              <rng:zeroOrMore>
                <rng:ref name="model.itemLike"/>
              </rng:zeroOrMore>
            </rng:choice>
          </content>
          <constraintSpec ident="checkComponentGrp" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:componentGrp">
                <sch:assert
                  test="every $i in ./child::mei:*[not(local-name()='head')] satisfies
                  $i/local-name() eq ./parent::mei:*/local-name()"
                  >Only child elements of the same name as the parent of the componentGrp-element
                  are allowed.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The child elements of this element are treated as parts of the bibliographic entity
              containing the <gi scheme="MEI">componentGrp</gi>. Although this is an implicit way of
              expressing FRBR's hasPart / isPartOf-relationships, it avoids this terminology in
              order to prevent confusion with musical terminology. All children of a component must
              be the same type as its parent: only <gi scheme="MEI">work</gi> children are allowed
              within <gi scheme="MEI">work</gi>, <gi scheme="MEI">item</gi> in <gi scheme="MEI"
                >item</gi>, etc.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="expressionList" module="MEI.frbr" mode="replace">
          <desc>Gathers bibliographic expression entities.</desc>
          <classes>
            <memberOf key="att.common"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="model.expressionLike"/>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <elementSpec ident="itemList" module="MEI.frbr" mode="replace">
          <desc>Gathers bibliographic item entities.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.typed"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="model.itemLike"/>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <elementSpec ident="langUsage" module="MEI.header" mode="replace">
          <desc>(language usage) – Groups elements describing the languages, sub-languages,
            dialects, etc., represented within the encoded resource.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.datapointing"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:ref name="language"/>
            </rng:oneOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="relationList" module="MEI.frbr" mode="replace">
          <desc>Gathers bibliographic relation elements.</desc>
          <classes>
            <memberOf key="att.common"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="model.relationLike"/>
            </rng:zeroOrMore>
          </content>
        </elementSpec>

        <!-- TapeConfig duplicates soundChan, issue #207 -->
        <!-- Revise description of soundChan to reflect the fact that it captures the number of 
        *playback* or *output* channels of a recording. This element maps to marc:344|g. -->
        <elementSpec ident="soundChan" module="MEI.header" mode="replace">
          <desc>(sound channels) – Reflects the number of apparent sound channels in the playback of
            a recording (monaural, stereophonic, quadraphonic, etc.).</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.physDescPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="num" usage="opt">
              <desc>records the channel configuration in numeric form.</desc>
              <datatype>
                <rng:data type="positiveInteger"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The number of apparent playback channels can differ from the number of physical
              channels of the recording medium, i.e., 2-track monophonic recordings. This element is
              analogous to MARC field 344 subfield g.</p>
          </remarks>
        </elementSpec>
        <!-- Delete tapeConfig and add trackConfig which (in the spirit of tapeConfig) captures the number of *physical* 
          or *input* channels of a recording. This element maps to marc:344|e and marc:344|f.-->
        <elementSpec ident="tapeConfig" module="MEI.header" mode="delete">
          <desc>(tape configuration) – Number of tracks on a sound tape (e.g., eight track, twelve
            track).</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.physDescPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <elementSpec ident="trackConfig" module="MEI.header" mode="add">
          <desc>(track configuration) – Number of physical/input tracks on a sound medium (e.g.,
            eight track, twelve track).</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.physDescPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="num" usage="opt">
              <desc>records the track configuration in numeric form.</desc>
              <datatype>
                <rng:data type="positiveInteger"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The number of apparent playback channels can differ from the number of physical
              channels of the recording medium, i.e., 2-track monophonic recordings. This element
              may be mapped to MARC field 344 subfield e or subfield f as appropriate.</p>
          </remarks>
        </elementSpec>

        <!-- Simplify relationship between textphraseLike.limited and textphraseLike models, issue #210 -->
        <!-- Move annotLike to textphraseLike.limited -->
        <classSpec ident="model.annotLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups annotation-like elements.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
          </classes>
        </classSpec>
        <!-- milestoneLike.text no longer member of textphraseLike -->
        <classSpec ident="model.milestoneLike.text" module="MEI.shared" type="model" mode="replace">
          <desc>groups milestone-style elements found in text.</desc>
        </classSpec>
        <!-- pbLike now participates directly in textphraseLike -->
        <classSpec ident="model.pbLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups pagebreak-like elements.</desc>
          <classes>
            <memberOf key="model.milestoneLike.music"/>
            <memberOf key="model.milestoneLike.text"/>
            <memberOf key="model.textphraseLike"/>
          </classes>
        </classSpec>
        <!-- textphraseLike.limited now a member of textphraseLike -->
        <classSpec ident="model.textphraseLike.limited" module="MEI.shared" type="model"
          mode="replace">
          <desc>groups textual elements that occur as part of the representation of the score, as
            opposed to the textual matter which accompanies it. This class is equivalent to the
            model.textphraseLike class without the pb element.</desc>
          <classes>
            <memberOf key="model.rdgPart.text"/>
            <memberOf key="model.textphraseLike"/>
          </classes>
        </classSpec>
        <!-- The following elements are no longer participate in textphraseLike directly;
          They're members of textphraseLike.limited, which is a member of textphraseLike -->
        <classSpec ident="model.addressLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups elements used to represent a postal address.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
            <memberOf key="model.pubStmtPart"/>
            <memberOf key="model.eventPart"/>
          </classes>
        </classSpec>
        <classSpec ident="model.biblLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups elements containing a bibliographic description.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
          </classes>
        </classSpec>
        <classSpec ident="model.editorialLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups editorial intervention elements.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
            <memberOf key="model.choicePart"/>
          </classes>
        </classSpec>
        <classSpec ident="model.figureLike" module="MEI.figtable" type="model" mode="replace">
          <desc>groups elements representing or containing graphic information such as an
            illustration or figure.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
          </classes>
        </classSpec>
        <classSpec ident="model.identifierLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups identifier-like elements.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
            <memberOf key="model.pubStmtPart"/>
          </classes>
        </classSpec>
        <classSpec ident="model.locrefLike" module="MEI.ptrref" type="model" mode="replace">
          <desc>groups elements used for purposes of location and reference.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
          </classes>
        </classSpec>
        <classSpec ident="model.measurementLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups elements that represent a measurement.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
          </classes>
        </classSpec>
        <classSpec ident="model.nameLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups elements that contain names.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
            <memberOf key="model.eventPart"/>
          </classes>
        </classSpec>
        <classSpec ident="model.nameLike.agent" module="MEI.namesdates" type="model" mode="replace">
          <desc>groups elements which contain names of individuals or corporate bodies.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
            <memberOf key="model.eventPart"/>
          </classes>
        </classSpec>
        <classSpec ident="model.nameLike.label" module="MEI.namesdates" type="model" mode="replace">
          <desc>groups elements that serve as stylistic labels.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
          </classes>
        </classSpec>
        <classSpec ident="model.nameLike.place" module="MEI.namesdates" type="model" mode="replace">
          <desc>groups place name and repository elements.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
          </classes>
        </classSpec>
        <classSpec ident="model.rendLike" module="MEI.shared" type="model" mode="replace">
          <desc>groups elements that mark typographical features.</desc>
          <classes>
            <memberOf key="model.textphraseLike.limited"/>
          </classes>
        </classSpec>

        <!-- Allow relative values for letter-spacing & line-height, issue #211 -->
        <!-- Add 'overstrike' -->
        <macroSpec ident="data.TEXTRENDITION" module="MEI" type="dt" mode="replace">
          <desc>Text rendition values.</desc>
          <content>
            <rng:list>
              <rng:oneOrMore>
                <rng:choice>
                  <!-- font size -->
                  <rng:value>xx-small</rng:value>
                  <a:documentation>relative font size</a:documentation>
                  <rng:value>x-small</rng:value>
                  <a:documentation>relative font size</a:documentation>
                  <rng:value>small</rng:value>
                  <a:documentation>relative font size</a:documentation>
                  <rng:value>medium</rng:value>
                  <a:documentation>relative font size</a:documentation>
                  <rng:value>large</rng:value>
                  <a:documentation>relative font size</a:documentation>
                  <rng:value>x-large</rng:value>
                  <a:documentation>relative font size</a:documentation>
                  <rng:value>xx-large</rng:value>
                  <a:documentation>relative font size</a:documentation>
                  <rng:value>smaller</rng:value>
                  <a:documentation>relative font size</a:documentation>
                  <rng:value>larger</rng:value>
                  <a:documentation>relative font size</a:documentation>
                  <!-- font style -->
                  <rng:value>italic</rng:value>
                  <a:documentation>italicized (slanted to right)</a:documentation>
                  <rng:value>oblique</rng:value>
                  <a:documentation>oblique (slanted to left)</a:documentation>
                  <!-- font variant -->
                  <rng:value>smcaps</rng:value>
                  <a:documentation>small capitals</a:documentation>
                  <!-- font weight -->
                  <rng:value>bold</rng:value>
                  <a:documentation>relative font weight</a:documentation>
                  <rng:value>bolder</rng:value>
                  <a:documentation>relative font weight</a:documentation>
                  <rng:value>lighter</rng:value>
                  <a:documentation>relative font weight</a:documentation>
                  <!-- enclosures -->
                  <rng:value>box</rng:value>
                  <a:documentation>enclosed in box</a:documentation>
                  <rng:value>circle</rng:value>
                  <a:documentation>enclosed in ellipse/circle</a:documentation>
                  <rng:value>dbox</rng:value>
                  <a:documentation>enclosed in diamond</a:documentation>
                  <rng:value>tbox</rng:value>
                  <a:documentation>enclosed in triangle</a:documentation>
                  <!-- decoration -->
                  <rng:value>bslash</rng:value>
                  <a:documentation>struck through by '\' (back slash)</a:documentation>
                  <rng:value>fslash</rng:value>
                  <a:documentation>struck through by '/' (forward slash)</a:documentation>
                  <rng:value>line-through</rng:value>
                  <a:documentation>struck through by '-'; may be qualified to indicate multiple
                    lines, e.g. line-through(2)</a:documentation>
                  <rng:value>none</rng:value>
                  <a:documentation>not rendered, invisible</a:documentation>

                  <!-- rotation currently specified by @rotation -->
                  <!-- <rng:value>rotate</rng:value>
                  <a:documentation>rotated</a:documentation> -->

                  <rng:value>obscure</rng:value>
                  <a:documentation>obscured by non-textual writing gesture, e.g. a large 'X', wavy
                    line, etc.</a:documentation>
                  <rng:value>overline</rng:value>
                  <a:documentation>line above the text; may be qualified to indicate multiple lines,
                    e.g. overline(3)</a:documentation>
                  <rng:value>overstrike</rng:value>
                  <a:documentation>obscured by other text, such as 'XXXXX'</a:documentation>
                  <rng:value>strike</rng:value>
                  <a:documentation>struck through by '-'; equivalent to line-through; may be
                    qualified to indicate multiple lines, e.g. strike(3)</a:documentation>
                  <rng:value>sub</rng:value>
                  <a:documentation>subscript</a:documentation>
                  <rng:value>sup</rng:value>
                  <a:documentation>superscript</a:documentation>
                  <rng:value>underline</rng:value>
                  <a:documentation>underlined; may be qualified to indicate multiple lines, e.g.
                    underline(2)</a:documentation>

                  <!-- horizontal alignment currently specified by @halign -->
                  <!-- <rng:value>left</rng:value>
                  <a:documentation>left justified</a:documentation>
                  <rng:value>right</rng:value>
                  <a:documentation>right justified</a:documentation>
                  <rng:value>center</rng:value>
                  <a:documentation>centered</a:documentation>
                  <rng:value>justify</rng:value>
                  <a:documentation>stretching from left to right margins</a:documentation> -->

                  <!-- vertical alignment currently specified by @valign -->
                  <!-- <rng:value>top</rng:value>
                  <a:documentation>top of content aligned with top of the surrounding
                    text</a:documentation>
                  <rng:value>middle</rng:value>
                  <a:documentation>middle of content aligned with middle of the surrounding
                    text</a:documentation>
                  <rng:value>bottom</rng:value>
                  <a:documentation>bottom of content aligned with bottom of the surrounding
                    text</a:documentation> -->

                  <!-- direction -->
                  <rng:value>ltr</rng:value>
                  <a:documentation>left-to-right (BIDI embed)</a:documentation>
                  <rng:value>rtl</rng:value>
                  <a:documentation>right-to-left (BIDI embed)</a:documentation>
                  <rng:value>lro</rng:value>
                  <a:documentation>left-to-right (BIDI override)</a:documentation>
                  <rng:value>rlo</rng:value>
                  <a:documentation>right-to-left (BIDI override)</a:documentation>

                  <!-- color currently specified by @color -->
                  <!-- <rng:zeroOrMore>
                    <rng:ref name="data.COLOR"/>
                  </rng:zeroOrMore> -->

                  <!-- values allowing a qualifier -->
                  <rng:data type="string">
                    <rng:param name="pattern"
                      >(underline|overline|line-through|strike)\(\d+\)</rng:param>
                  </rng:data>
                  <rng:data type="string">
                    <rng:param name="pattern"
                      >(letter-spacing|line-height)\((\+|-)?\d+(\.\d+)?%?\)</rng:param>
                  </rng:data>

                  <!-- rotation currently specified by @rotation -->
                  <!--<rng:data type="string">
                    <rng:param name="pattern">rotate\(-?\d{1,3}(\.[0-9]*)?\)</rng:param>
                  </rng:data>-->

                </rng:choice>
              </rng:oneOrMore>
            </rng:list>
          </content>
        </macroSpec>

        <!-- Revise line rendition, issue #212 -->
        <!-- THIS CHANGE BREAKS BACKWARD COMPATIBILITY! -->
        <macroSpec ident="data.LINERENDITION" module="MEI" type="dt" mode="delete"/>
        <macroSpec ident="data.LINEWIDTHTERM" module="MEI" type="dt" mode="add">
          <desc>Relative width of a line.</desc>
          <content>
            <rng:choice>
              <rng:value>narrow</rng:value>
              <a:documentation>default line width</a:documentation>
              <rng:value>medium</rng:value>
              <a:documentation>twice as wide as narrow</a:documentation>
              <rng:value>wide</rng:value>
              <a:documentation>twice as wide as medium</a:documentation>
            </rng:choice>
          </content>
        </macroSpec>
        <macroSpec ident="data.LINEFORM" module="MEI" type="dt" mode="add">
          <desc>Visual form of a line.</desc>
          <content>
            <rng:choice>
              <rng:value>dashed</rng:value>
              <a:documentation>dashed line</a:documentation>
              <rng:value>dotted</rng:value>
              <a:documentation>dotted line</a:documentation>
              <rng:value>solid</rng:value>
              <a:documentation>straight, uninterrupted line</a:documentation>
              <rng:value>wavy</rng:value>
              <a:documentation>undulating line</a:documentation>
            </rng:choice>
          </content>
        </macroSpec>
        <classSpec ident="att.linerend" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that record the visual rendition of lines.</desc>
          <attList>
            <attDef ident="lform" usage="opt">
              <datatype>
                <rng:ref name="data.LINEFORM"/>
              </datatype>
            </attDef>
            <!-- @llength implies we know the direction of the vector which we 
              can't know without establishing an end point, which in turn makes
              @llength redundant.
            -->
            <attDef ident="lwidth" usage="opt">
              <desc>Width of the line.</desc>
              <datatype>
                <rng:choice>
                  <rng:ref name="data.LINEWIDTHTERM"/>
                  <rng:ref name="data.MEASUREMENT"/>
                </rng:choice>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <elementSpec ident="line" module="MEI.usersymbols" mode="replace">
          <desc>A line that cannot be represented by a more specific element.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startendid"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visualoffset2"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.xy2"/>
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>Visual form of the line.</desc>
              <datatype>
                <rng:ref name="data.LINEFORM"/>
              </datatype>
            </attDef>
            <!-- @llength implies we know the direction of the vector which we 
              can't know without establishing an end point, which in turn makes
              @llength redundant.
            -->
            <attDef ident="width" usage="opt">
              <desc>Width of the line.</desc>
              <datatype>
                <rng:choice>
                  <rng:ref name="data.LINEWIDTHTERM"/>
                  <rng:ref name="data.MEASUREMENT"/>
                </rng:choice>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The starting point of the line may be identified in absolute output coordinate terms
              using the <att>x</att> and <att>y</att> attributes. The attributes in the
              att.visualoffset class may be used to record horizontal, vertical, or time offsets
              from these absolute coordinates or from the location of the element reference in the
                <att>startid</att> attribute. Similarly, the terminal point of the line may be
              recorded using the <att>x2</att> and <att>y2</att> attributes. Attributes in the
              att.visualoffset2 class maybe used to record the offsets of the ending point. Textual
              content of the <gi scheme="MEI">line</gi> element, e.g. 'gliss.', may be rendered with
              the line. The appearance of the line is captured in the color, <att>form</att> and
                <att>width</att> attributes.</p>
          </remarks>
        </elementSpec>

        <!--<!-\- Support SMuFL, issue #213 -\->
        <!-\- Revise description of att.typography -\->
        <classSpec ident="att.typography" module="MEI.shared" type="atts" mode="replace">
          <desc>Typographical attributes for text-containing elements.</desc>
          <attList>
            <attDef ident="fontfam" usage="opt">
              <desc>contains the name of a font-family.</desc>
              <datatype>
                <rng:ref name="data.FONTFAMILY"/>
              </datatype>
            </attDef>
            <attDef ident="fontname" usage="opt">
              <desc>holds the name of a font.</desc>
              <datatype>
                <rng:ref name="data.FONTNAME"/>
              </datatype>
            </attDef>
            <attDef ident="fontsize" usage="opt">
              <desc>indicates the size of a font in printers' points, i.e., 1/72nd of an
                inch.</desc>
              <datatype>
                <rng:data type="decimal"/>
              </datatype>
            </attDef>
            <attDef ident="fontstyle" usage="opt">
              <desc>records the style of a font, i.e, italic, oblique, or normal.</desc>
              <datatype>
                <rng:ref name="data.FONTSTYLE"/>
              </datatype>
            </attDef>
            <attDef ident="fontweight" usage="opt">
              <desc>used to indicate bold type.</desc>
              <datatype>
                <rng:ref name="data.FONTWEIGHT"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-\- Add att.typography.music that inherits from att.typography and att.altsym and adds @codepoint -\->
        <classSpec ident="att.typography.music" module="MEI.shared" type="atts" mode="add">
          <desc>Typographical attributes for musical elements.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.typography"/>
          </classes>
          <attList>
            <attDef ident="codepoint" usage="opt">
              <desc>numeric reference to a musical glyph.</desc>
              <datatype>
                <rng:data type="NMTOKEN">
                  <rng:param name="pattern">x[A-F0-9]+</rng:param>
                </rng:data>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-\- Make att.accid.vis and att.artic.vis members of att.typography.music, not att.typography -\->
        <classSpec ident="att.accid.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.enclosingchars"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset.ho"/>
            <memberOf key="att.visualoffset.vo"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.accid.vis.mensural"/>
          </classes>
        </classSpec>
        <classSpec ident="att.artic.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.enclosingchars"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <!-\- Make att.["musical" element].vis members of att.typography.music -\->
        <classSpec ident="att.arpeg.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
          <attList>
            <attDef ident="arrow" usage="opt">
              <desc>indicates if an arrowhead is to be drawn as part of the arpeggiation
                symbol.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.beatRpt.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.expandable"/>
            <memberOf key="att.typography.music"/>
          </classes>
          <attList>
            <attDef ident="rend" usage="req">
              <desc>indicates the number of slashes required to render the appropriate beat repeat
                symbol. When a single beat is repeated, consisting of a single note or chord, it is
                indicated by a single thick, slanting slash; therefore, the value '1' should be
                used. The following values should be used when the beat is divided into even notes:
                4ths or 8ths=1, 16ths=2, 32nds=3, 64ths=4, 128ths=5. When the beat is comprised of
                mixed duration values, the symbol is always rendered as 2 slashes and 2 dots.</desc>
              <datatype>
                <rng:ref name="data.BEATRPT.REND"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-\- Make <breath> a member of att.typography, issue #167. Actually, make member of att.typography.music -\->
        <classSpec ident="att.breath.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.clef.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.typography.music"/>
          </classes>
        </classSpec>
        <classSpec ident="att.custos.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography.music"/>
          </classes>
        </classSpec>
        <classSpec ident="att.dot.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset.ho"/>
            <memberOf key="att.visualoffset.vo"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.dot.vis.mensural"/>
          </classes>
        </classSpec>
        <classSpec ident="att.fermata.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>describes the visual appearance of the fermata; that is, whether it occurs as
                upright or inverted.</desc>
              <valList type="closed">
                <valItem ident="inv">
                  <desc>inverted, i.e., curve or bracket below the dot.</desc>
                </valItem>
                <valItem ident="norm">
                  <desc>upright; i.e., curve or bracket above the dot.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="shape" usage="opt">
              <desc>describes the visual appearance of the fermata; that is, whether it has a
                curved, square, or angular shape.</desc>
              <valList type="closed">
                <valItem ident="curved">
                  <desc>a curve above or below the dot.</desc>
                </valItem>
                <valItem ident="square">
                  <desc>a bracket above or below the dot.</desc>
                </valItem>
                <valItem ident="angular">
                  <desc>a triangle above or below the dot.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.gliss.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visualoffset2"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.xy2"/>
            <memberOf key="att.linerend"/>
          </classes>
          <!-\- Text should be recorded as content of gliss element. -\->
          <!-\-<attList>
            <attDef ident="text" usage="opt">
              <desc>records a text string, such as 'gliss', that accompanies the glissando
                mark.</desc>
            </attDef>
          </attList>-\->
        </classSpec>
        <classSpec ident="att.grpSym.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.halfmRpt.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.expandable"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
          </classes>
        </classSpec>
        <classSpec ident="att.harpPedal.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.ineume.vis" module="MEI.neumes" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography.music"/>
          </classes>
        </classSpec>
        <classSpec ident="att.keyAccid.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.enclosingchars"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.mensur.vis" module="MEI.mensural" type="atts" mode="replace">
          <desc>Visual domain attributes. These attributes describe the physical appearance of the
            mensuration sign/time signature of mensural notation.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography.music"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>indicates whether the base symbol is written vertically or horizontally.</desc>
              <valList type="closed">
                <valItem ident="horizontal"/>
                <valItem ident="vertical"/>
              </valList>
            </attDef>
            <attDef ident="orient" usage="opt">
              <desc>describes the rotation or reflection of the base symbol.</desc>
              <datatype>
                <rng:ref name="data.ORIENTATION"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.meterSig.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.typography.music"/>
          </classes>
          <attList>
            <attDef ident="rend" usage="opt">
              <desc>contains an indication of how the meter signature should be rendered.</desc>
              <valList type="closed">
                <valItem ident="num">
                  <desc>show only the number of beats.</desc>
                </valItem>
                <valItem ident="denomsym">
                  <desc>the lower number in the meter signature is replaced by a note symbol.</desc>
                </valItem>
                <valItem ident="norm">
                  <desc>meter signature rendered using traditional numeric values.</desc>
                </valItem>
                <valItem ident="invis">
                  <desc>meter signature not rendered.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.mordent.vis" module="MEI.cmnOrnaments" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
          </classes>
        </classSpec>
        <classSpec ident="att.mRest.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.cutout"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.staffloc.pitched"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visibility"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.mRpt.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.expandable"/>
            <memberOf key="att.typography.music"/>
          </classes>
        </classSpec>
        <classSpec ident="att.mRpt2.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.expandable"/>
            <memberOf key="att.typography.music"/>
          </classes>
        </classSpec>
        <classSpec ident="att.multiRest.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.staffloc.pitched"/>
            <memberOf key="att.typography.music"/>
          </classes>
          <attList>
            <attDef ident="block" usage="opt">
              <desc>When the block attribute is used, combinations of the 1, 2, and 4 measure rest
                forms (Read, p. 104) should be rendered instead of the modern form or an alternative
                symbol.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.multiRpt.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.expandable"/>
            <memberOf key="att.typography.music"/>
          </classes>
        </classSpec>
        <classSpec ident="att.note.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.coloration"/>
            <memberOf key="att.enclosingchars"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.stemmed"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visibility"/>
            <memberOf key="att.visualoffset.ho"/>
            <memberOf key="att.visualoffset.to"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.note.vis.cmn"/>
          </classes>
          <attList>
            <attDef ident="headshape" usage="opt">
              <desc>used to override the head shape normally used for the given duration.</desc>
              <datatype>
                <rng:ref name="data.HEADSHAPE"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.pedal.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes. The place attribute captures the placement of the pedal
            marking with respect to the staff with which it is associated. Modern publishing
            standards require the place to be 'below'; however, for transcriptions of manuscript
            works, this attribute class allows the full range of values.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
          <attList>
            <attDef ident="style" usage="opt">
              <desc>determines whether piano pedal marks should be rendered as lines or as
                terms.</desc>
              <valList type="closed">
                <valItem ident="line">
                  <desc>continuous line with start and end positions rendered by vertical bars and
                    bounces shown by upward-pointing "blips".</desc>
                </valItem>
                <valItem ident="pedstar">
                  <desc>pedal down and half pedal rendered with "Ped.", pedal up rendered by "*",
                    pedal "bounce" rendered with "* Ped.".</desc>
                </valItem>
                <valItem ident="altpedstar">
                  <desc>pedal up and down indications same as with "pedstar", but bounce is rendered
                    with "Ped." only.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.proport.vis" module="MEI.mensural" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.typography.music"/>
          </classes>
        </classSpec>
        <classSpec ident="att.rest.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.enclosingchars"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.rest.vis.cmn"/>
            <memberOf key="att.rest.vis.mensural"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.staffloc.pitched"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.sb.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <!-\-<classes>
            <memberOf key="att.typography.music"/>
          </classes>-\->
          <attList>
            <attDef ident="rend" usage="opt">
              <desc>indicates whether hash marks should be rendered between systems. See Read, p.
                436, ex. 26-3.</desc>
              <valList type="closed">
                <valItem ident="hash">
                  <desc>display hash marks between systems.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.staffGrp.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.labels.addl"/>
            <memberOf key="att.staffgroupingsym"/>
            <!-\-<memberOf key="att.typography.music"/>-\->
            <memberOf key="att.visibility"/>
          </classes>
          <attList>
            <attDef ident="barthru" usage="opt">
              <desc>indicates whether bar lines go across the space between staves (true) or are
                only drawn across the lines of each staff (false).</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
            <!-\- Revise staff grouping symbols, issue #182 -\->
            <attDef ident="system.leftline" usage="opt">
              <desc>indicates whether the staves are joined at the left by a continuous line. The
                default value is "true". Do not confuse this with a line used as a grouping
                symbol.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.trill.vis" module="MEI.cmnOrnaments" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visualoffset2.ho"/>
            <memberOf key="att.visualoffset2.to"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.turn.vis" module="MEI.cmnOrnaments" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.uneume.vis" module="MEI.neumes" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visibility"/>
            <memberOf key="att.visualoffset.ho"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <!-\- Remove reference to att.typography in accid and artic; this should've been done using att.vis anyway -\->
        <elementSpec ident="accid" module="MEI.shared" mode="replace">
          <desc>(accidental) – Records a temporary alteration to the pitch of a note.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.accid.log"/>
            <memberOf key="att.accid.vis"/>
            <memberOf key="att.accid.ges"/>
            <memberOf key="att.accid.anl"/>
            <memberOf key="model.noteModifierLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <remarks>
            <p>An accidental may raise a pitch by one or two semitones or it may cancel a previous
              accidental or part of a key signature. This element provides an alternative to the
                <att>accid</att> and <att>accid.ges</att> attributes on the <gi scheme="MEI"
                >note</gi> element. The element may be used when specific display info, such as size
              or color, needs to be recorded for the accidental or when multiple accidentals occur
              on a single note. The <att>func</att> attribute can be used to differentiate between
              the accidental's functions, such as 'cautionary' or 'editorial'.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="artic" module="MEI.shared" mode="replace">
          <desc>(articulation) – An indication of how to play a note or chord.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.artic.log"/>
            <memberOf key="att.artic.vis"/>
            <memberOf key="att.artic.ges"/>
            <memberOf key="att.artic.anl"/>
            <memberOf key="model.noteModifierLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <remarks>
            <p>Articulations typically affect duration, such as staccato marks, or the force of
              attack, such as accents. This element provides an alternative to the <att>artic</att>
              attribute on the <gi scheme="MEI">note</gi> and <gi scheme="MEI">chord</gi> elements.
              It may be used when specific display info, such as size or color, needs to be recorded
              for the articulation or when multiple articulation marks occur on a single note or
              chord.</p>
          </remarks>
        </elementSpec>
        <!-\- Since symbol is now a member of att.typography.music, which includes @altsym,
          @ref is no longer necessary. Its function can be performed by @altsym. -\->
        <!-\- Remove symbol from model.graphicprimitiveLike class and add to model.textphraseLike classes.
          This makes it possible to use symbol to include music characters from fonts like BravuraText anywhere text is permitted. -\->
        <!-\- THESE CHANGES BREAK BACKWARD COMPATIBILITY! -\->
        <elementSpec ident="symbol" module="MEI.usersymbols" mode="replace">
          <desc>A reference to a previously defined symbol.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.scalable"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.typography.music"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
            <memberOf key="model.textphraseLike"/>
            <memberOf key="model.textphraseLike.limited"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <!-\- Remove @ref -\->
          <!-\-<attList>
            <attDef ident="ref" usage="req">
              <desc>contains a reference to a previously-declared user-defined symbol.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
            </attDef>
          </attList>-\->
          <remarks>
            <p>The starting point, e.g. "hotspot", of the symbol may be identified in absolute
              output coordinate terms using the <att>x</att> and <att>y</att> attributes or relative
              to another element using the <att>startid</att> attribute. Attributes in the
              att.visualoffset class may be used to record horizontal, vertical, or time offsets
              from the absolute coordinates or from the location of the referenced element. The
                <att>ref</att> attribute must contain the id of a <gi scheme="MEI">symbolDef</gi>
              element. The <att>scale</att> attribute indicates that the printed output must be
              scaled by the specified percentage.</p>
          </remarks>
        </elementSpec>
        <!-\- Allow symbol within anchoredText (but not other members of model.graphicprimitiveLike) -\->
        <elementSpec ident="anchoredText" module="MEI.usersymbols" mode="replace">
          <desc>Container for text that is fixed to a particular location, regardless of changes
            made to the layout of the measures around it.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element may be used where semantic markup of the text is neither possible nor
              desirable, such as in optical music recognition (OMR) applications. The content model
              here is similar to paragraph without model.textcomponent and <gi scheme="MEI">pb</gi>
              sub-elements. The starting point of the text may be identified in absolute output
              coordinate terms using the <att>x</att> and <att>y</att> attributes or relative to the
              location of another element using the <att>startid</att> attribute. The attributes in
              the att.visualoffset class may be used to record horizontal, vertical, or time offsets
              from the absolute coordinates or from the location of the referenced element.</p>
          </remarks>
        </elementSpec> -->

        <!-- Harmonize models of gliss and line by allowing gliss to contain text to be 
          rendered with the line, issue #215 -->
        <!-- Remove @text. THIS CHANGE BREAKS BACKWARD COMPATIBILITY! -->
        <classSpec ident="att.gliss.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visualoffset2"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.xy2"/>
            <memberOf key="att.linerend"/>
          </classes>
        </classSpec>
        <elementSpec ident="gliss" module="MEI.cmn" mode="replace">
          <desc>(glissando) – A continuous or sliding movement from one pitch to another, usually
            indicated by a straight or wavy line.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.gliss.log"/>
            <memberOf key="att.gliss.vis"/>
            <memberOf key="att.gliss.ges"/>
            <memberOf key="att.gliss.anl"/>
            <!-- Make control events members of att.typed, issue #166 -->
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="gliss_start-_and_end-type_attributes_required"
            scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:gliss">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
                <sch:assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
                  attributes: dur, dur.ges, endid, or tstamp2</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>Commonly also called a 'slide'. The term 'glissando' is frequently used to indicate
              both the case where distinct intermediate pitches are produced (as on the piano) and
              the case where they are not (as on the trombone), though the latter is sometimes
              referred to as 'portamento'. The visual appearance of the indicating line may be
              recorded in the <att>lform</att> and <att>lwidth</att> attributes. The starting point
              of the glissando may be indicated by either a <att>startid</att>, <att>tstamp</att>,
                <att>tstamp.ges</att>, or <att>tstamp.real</att> attribute, while the ending point
              may be recorded by either a <att>dur</att>, <att>dur.ges</att>, <att>endid</att>, or
                <att>tstamp2</att> attribute. It is a semantic error not to specify one starting and
              one ending type of attribute.</p>
          </remarks>
        </elementSpec>

        <!--<!-\- Add clones of SVG elements to model.graphicprimitives, issue #216 -\->
        <!-\- Add att.dimensions class, make graphic member -\->
        <classSpec ident="att.dimensions" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that capture the dimensions of an entity.</desc>
          <classes>
            <memberOf key="att.height"/>
            <memberOf key="att.width"/>
          </classes>
        </classSpec>
        <classSpec ident="att.width" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that describe horizontal size.</desc>
          <attList>
            <attDef ident="width" usage="opt">
              <desc>measurement of the horizontal dimension of an entity.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.height" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that describe vertical size.</desc>
          <attList>
            <attDef ident="height" usage="opt">
              <desc>measurement of the vertical dimension of an entity.</desc>
              <datatype>
                <rng:data type="positiveInteger"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-\- Add circle element -\->
        <elementSpec ident="circle" module="MEI.usersymbols" mode="add">
          <desc>A circle.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
            <!-\- att.visualoffset attrs place the circle relative to the 
              entity referenced in @startid -\->
            <memberOf key="att.visualoffset"/>
            <!-\- @x & @y record the center of the circle -\->
            <memberOf key="att.xy"/>
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <attList>
            <attDef ident="lcolor" usage="opt">
              <desc>Color of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="lwidth" usage="opt">
              <desc>Width of the outer boundary.</desc>
              <datatype>
                <rng:choice>
                  <rng:ref name="data.LINEWIDTHTERM"/>
                  <rng:ref name="data.MEASUREMENT"/>
                </rng:choice>
              </datatype>
            </attDef>
            <attDef ident="r" usage="opt">
              <desc>Radius</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>color</att> attribute records the fill color of the circle. Use
                <att>lcolor</att> to capture the color of its boundary line.</p>
          </remarks>
        </elementSpec>
        <!-\- Add ellipse element -\->
        <elementSpec ident="ellipse" module="MEI.usersymbols" mode="add">
          <desc>An ellipse.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
            <!-\- att.visualoffset attrs place the ellipse relative to the entity 
              referenced in @startid -\->
            <memberOf key="att.visualoffset"/>
            <!-\- cs, cy, rx, ry determine the location & extent of the ellipse -\->
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <attList>
            <attDef ident="lcolor" usage="opt">
              <desc>Color of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="lwidth" usage="opt">
              <desc>Width of the outer boundary.</desc>
              <datatype>
                <rng:choice>
                  <rng:ref name="data.LINEWIDTHTERM"/>
                  <rng:ref name="data.MEASUREMENT"/>
                </rng:choice>
              </datatype>
            </attDef>
            <attDef ident="cx" usage="opt">
              <desc>the x-axis center of the ellipse.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
            <attDef ident="cy" usage="opt">
              <desc>the y-axis center of the ellipse.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
            <attDef ident="rx" usage="req">
              <desc>the length of the ellipse's radius along the x-axis.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
            <attDef ident="ry" usage="req">
              <desc>the length of the ellipse's radius along the y-axis.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>color</att> attribute records the fill color of the ellipse. Use
                <att>lcolor</att> to capture the color of its boundary line.</p>
          </remarks>
        </elementSpec>
        <!-\- Add polyline element -\->
        <elementSpec ident="polyline" module="MEI.usersymbols" mode="add">
          <desc>Defines any shape that consists of only straight lines.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.common"/>
            <memberOf key="att.color"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
            <!-\- att.visualoffset attrs place the starting point of the shape relative 
              to the entity referenced in @startid -\->
            <memberOf key="att.visualoffset"/>
            <!-\- the @points attribute contains the defining points of the shape -\->
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>Visual form of the line.</desc>
              <datatype>
                <rng:ref name="data.LINEFORM"/>
              </datatype>
            </attDef>
            <attDef ident="points" usage="opt">
              <desc>describes a polyline as a set of xy coordinates, e.g., 19 45, -32 118.</desc>
              <constraintSpec ident="polylinepoints_constraint" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:polyline[@points]">
                    <sch:assert test="matches(normalize-space(@points),
                      '^[0-9]+(\.[0-9]+)?\s*,\s*([0-9]+(\.[0-9]+)?)((\s+[0-9]+(\.[0-9]+)?\s*,\s*[0-9]+(\.[0-9]+)?)){1,}$')"
                      >The points attribute must contain at least two comma-separated xy
                      coordinates.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="width" usage="opt">
              <desc>Width of the line.</desc>
              <datatype>
                <rng:choice>
                  <rng:ref name="data.LINEWIDTHTERM"/>
                  <rng:ref name="data.MEASUREMENT"/>
                </rng:choice>
              </datatype>
            </attDef>
          </attList>
        </elementSpec>
        <!-\- Add a polygon element -\->
        <elementSpec ident="polygon" module="MEI.usersymbols" mode="add">
          <desc>Defines any shape that has at least three sides.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.common"/>
            <memberOf key="att.color"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
            <!-\- att.visualoffset attrs place the polygon relative to the entity referenced in @startid -\->
            <memberOf key="att.visualoffset"/>
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <attList>
            <!-\- the @points attribute contains the defining points of the shape -\->
            <attDef ident="points" usage="opt">
              <desc>describes a polyline as a set of xy coordinates, e.g., 19 45, -32 118.</desc>
              <constraintSpec ident="polygonpoints_constraint" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:polygon[@points]">
                    <sch:assert test="matches(normalize-space(@points),
                      '^[0-9]+(\.[0-9]+)?\s*,\s*([0-9]+(\.[0-9]+)?)((\s+[0-9]+(\.[0-9]+)?\s*,\s*[0-9]+(\.[0-9]+)?)){2,}$')"
                      >The points attribute must contain at least three comma-separated xy
                      coordinates.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="lcolor" usage="opt">
              <desc>Color of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="lwidth" usage="opt">
              <desc>Width of the outer boundary.</desc>
              <datatype>
                <rng:choice>
                  <rng:ref name="data.LINEWIDTHTERM"/>
                  <rng:ref name="data.MEASUREMENT"/>
                </rng:choice>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>color</att> attribute records the fill color of the polygon. Use
                <att>lcolor</att> to capture the color of its boundary line.</p>
          </remarks>
        </elementSpec>
        <!-\- DO NOT add rectangle element as it causes problem interaction between att.coordinated and att. -\->
        <!-\-<elementSpec ident="rectangle" module="MEI.usersymbols" mode="add">
          <desc>A rectangle.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <!-\\- attrs in att.coordinated capture the defining of the rectangle -\\->
            <memberOf key="att.coordinated"/>
            <memberOf key="att.dimensions"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startendid"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visualoffset2"/>
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <attList>
            <!-\\-<attDef ident="form" usage="opt">
              <desc>Visual form of the line.</desc>
              <datatype>
                <rng:ref name="data.LINEFORM"/>
              </datatype>
            </attDef>-\\->
            <!-\\- @length implies we know the direction of the vector which we 
              can't know without establishing an end point, which in turn makes
              @length redundant.
            -\\->
            <!-\\-<attDef ident="length" usage="opt">
              <desc>Length of the line.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>-\\->
            <attDef ident="lcolor" usage="opt">
              <desc>Color of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="lwidth" usage="opt">
              <desc>Width of the outer boundary.</desc>
              <datatype>
                <rng:choice>
                  <rng:ref name="data.LINEWIDTHTERM"/>
                  <rng:ref name="data.MEASUREMENT"/>
                </rng:choice>
              </datatype>
            </attDef>
            <attDef ident="rx" usage="opt">
              <desc>the x-axis radius of a rectangle with rounded corners.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
            <attDef ident="ry" usage="opt">
              <desc>the y-axis radius of a rectangle with rounded corners.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>color</att> attribute records the fill color of the rectangle. Use
                <att>lcolor</att> to capture the color of its boundary line.</p>
          </remarks>
        </elementSpec>-\->
        <!-\- Revise documentation of curve and add Schematron rule to enforce restrictions on @bezier. -\->
        <elementSpec ident="curve" module="MEI.usersymbols" mode="replace">
          <desc>A curved line that cannot be represented by a more specific element, such as a <gi
              scheme="MEI">slur</gi>.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <memberOf key="att.curvature"/>
            <memberOf key="att.curverend"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startendid"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visualoffset2"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.xy2"/>
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <remarks>
            <p>The starting point of the curve may be identified in absolute output coordinate terms
              using the <att>x</att> and <att>y</att> attributes or relative to the location of
              another element using the <att>startid</att> attribute. The attributes in the
              att.visualoffset class may be used to record horizontal, vertical, or time offsets
              from the absolute coordinates or from the location of the referenced element.
              Similarly, the terminal point of the curve may be recorded using either the
                <att>x2</att> and <att>y2</att> coordinates or in relation to the location of
              another element using the <att>endid</att> attribute. Attributes in the
              att.visualoffset2 class maybe used to record the offsets of the ending point. The
                <att>bulge</att> attribute or, alternatively, the <att>bezier</att> attribute,
              describes the shape of the curve. The <att>bulge</att> attribute describes the curve
              as one or more distance values to the left or right of an imaginary line connecting
              the endpoints of the curve while the <att>bezier</att> attribute records the placement
              of Bezier control points as a series of xy coordinate pairs, e.g., 19,45 -32,118 and
              optional SVG "shortcut" commands. The <att>rend</att> attribute captures the
              appearance of the curve.</p>
          </remarks>
        </elementSpec>
        <!-\- Add Schematron constraint for @bezier and datatype for @bulge. -\->
        <classSpec ident="att.curvature" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that describe curvature.</desc>
          <constraintSpec ident="bezierpoints_constraint" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:*[@bezier]">
                <sch:assert test="matches(normalize-space(@bezier),
                  '^(\s*([CQST]\s*)?[0-9]+(\.[0-9]+)?\s*,\s*[0-9]+(\.[0-9]+)?){1,}$')">The bezier
                  attribute must contain at least one comma-separated xy coordinate pair, optionally
                  preceded by an SVG "shortcut" command.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="bezier" usage="opt">
              <desc>records the placement of Bezier control points as a series of xy coordinates,
                e.g., 19,45 -32,118.</desc>
            </attDef>
            <attDef ident="bulge" usage="opt">
              <desc>describes a curve as a set of distance values to the left or right of an
                imaginary line connecting the endpoints of the curve.</desc>
              <datatype>
                <rng:list>
                  <rng:oneOrMore>
                    <rng:data type="decimal"/>
                  </rng:oneOrMore>
                </rng:list>
              </datatype>
            </attDef>
            <attDef ident="curvedir" usage="opt">
              <desc>describes a curve with a generic term indicating the direction of
                curvature.</desc>
              <valList type="closed">
                <valItem ident="above">
                  <desc>upward curve.</desc>
                </valItem>
                <valItem ident="below">
                  <desc>downward curve.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <!-\- Revise description of graphic -\->
        <elementSpec ident="graphic" module="MEI.figtable" mode="replace">
          <desc>Indicates the location of an inline graphic.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.dimensions"/>
            <memberOf key="att.internetmedia"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.pointing"/>
            <memberOf key="att.measurement"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.graphicLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="zone"/>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="graphic_child_of_zone" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:zone/mei:graphic">
                <sch:assert test="count(mei:*) = 0">graphic child of zone cannot have
                  children</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec> -->

        <!--<!-\- Revise content model of figDesc, issue #217 -\->
        <!-\- THIS CHANGE BREAKS BACKWARD COMPATIBILITY! -\->
        <elementSpec ident="figDesc" module="MEI.figtable" mode="replace">
          <desc>(figure description) – Contains a brief prose description of the appearance or
            content of a graphic figure, for use when documenting an image without displaying
            it.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.figDescLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textcomponentLike"/>
                <rng:ref name="model.texphraseLike.limited"/>
                <!-\-<rng:ref name="model.graphicprimitiveLike"/>
                <rng:ref name="model.annotLike"/>-\->
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>Best practice suggests the use of controlled vocabulary for figure descriptions.
              Don't confuse this entity with a figure caption. A caption is text primarily intended
              for display with an illustration. It may or may not function as a description of the
              illustration.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>-->

        <!-- Harmonize content models of biblList, eventList, handList, list, and termList 
        by allowing head and by permitting each item to be preceded by an optional label. biblList
        is also allowed to be recursive, issue #218. -->
        <elementSpec ident="biblList" module="MEI.shared" mode="replace">
          <desc>List of bibliographic references.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.listLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:group>
                  <rng:optional>
                    <rng:ref name="model.labelLike"/>
                  </rng:optional>
                  <rng:ref name="model.biblLike"/>
                </rng:group>
                <rng:ref name="biblList"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="handList" module="MEI.header" mode="replace">
          <desc>Container for one or more hand elements.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.physDescPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:optional>
                <rng:ref name="model.labelLike"/>
              </rng:optional>
              <rng:ref name="hand"/>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="list" module="MEI.text" mode="replace">
          <desc>A formatting element that contains a series of items separated from one another and
            arranged in a linear, often vertical, sequence.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.xy"/>
            <memberOf key="model.listLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:optional>
                <rng:ref name="model.labelLike"/>
              </rng:optional>
              <rng:ref name="li"/>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="list_type_constraint" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:list[@type='gloss']">
                <sch:assert test="count(mei:label) = count(mei:li)">In a list of type "gloss" all
                  items must be immediately preceded by a label.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>used to indicate the format of a list. In a "simple" list, <gi scheme="MEI"
                  >li</gi> elements are not numbered or bulleted. In a "marked" list, the sequence
                of the list items is not critical, and a bullet, box, dash, or other character is
                displayed at the start of each <gi scheme="MEI">item</gi>. In an "ordered" list, the
                sequence of the items is important, and each <gi scheme="MEI">li</gi> is lettered or
                numbered. Style sheet functions should be used to specify the mark or numeration
                system for each <gi scheme="MEI">li</gi>.</desc>
              <valList type="closed">
                <valItem ident="simple">
                  <desc>items are not numbered or bulleted</desc>
                </valItem>
                <valItem ident="marked">
                  <desc>bullet, box, dash, or other character is displayed before each item</desc>
                </valItem>
                <valItem ident="ordered">
                  <desc>each item is numbered or lettered</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="type" usage="opt">
              <desc>captures the nature of the content of a list.</desc>
              <valList type="semi">
                <valItem ident="gloss">
                  <desc>each list item glosses some term or concept, which is given by a label
                    element preceding the list item.</desc>
                </valItem>
                <valItem ident="index">
                  <desc>each list item is an entry in an index such as the alphabetical topical
                    index at the back of a print volume.</desc>
                </valItem>
                <valItem ident="instructions">
                  <desc>each list item is a step in a sequence of instructions, as in a
                    recipe.</desc>
                </valItem>
                <valItem ident="litany">
                  <desc>each list item is one of a sequence of petitions, supplications or
                    invocations, typically in a religious ritual.</desc>
                </valItem>
                <valItem ident="syllogism">
                  <desc>each list item is part of an argument consisting of two or more propositions
                    and a final conclusion derived from them.</desc>
                </valItem>
              </valList>
              <remarks>
                <p>In a list of type "gloss" it is a semantic error not to precede each list item
                  with a label.</p>
              </remarks>
            </attDef>
          </attList>
          <remarks>
            <p>This element is modelled on elements in Encoded Archival Description (EAD), Text
              Encoding Initiative (TEI), and HTML standards.</p>
          </remarks>
        </elementSpec>
        <!-- Enforce constraints on attribute targets, issue #226 -->
        <elementSpec ident="termList" module="MEI.header" mode="replace">
          <desc>Collection of text phrases which describe a resource.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.classcodeident"/>
            <memberOf key="att.typed"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:optional>
                <rng:ref name="model.labelLike"/>
              </rng:optional>
              <rng:ref name="term"/>
            </rng:zeroOrMore>
          </content>
        </elementSpec>

        <!-- Allow <lg> in <p>, issue #219 -->
        <classSpec ident="model.lgLike" module="MEI.text" type="model" mode="replace">
          <desc>groups elements that have a line-grouping function.</desc>
          <classes>
            <memberOf key="model.paracontentPart"/>
            <memberOf key="model.textcomponentLike"/>
          </classes>
        </classSpec>

        <!-- Move <head> to MEI.shared since it occurs in multiple modules, issue #220 -->
        <elementSpec ident="head" module="MEI.shared" mode="replace">
          <desc>(heading) – Contains any heading, for example, the title of a section of text, or
            the heading of a list.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.xy"/>
            <memberOf key="model.headLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>One or more <gi scheme="MEI">head</gi> elements usually identify the parent element
              and/or its purpose.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on elements in Encoded Archival Description (EAD), Text
              Encoding Initiative (TEI), and HTML standards.</p>
          </remarks>
        </elementSpec>

        <!-- Revise usage of <head>: allow multiple head elements, allow head in more places, issue #221 -->
        <!-- add schematron to disallow mixing of structured and unstructured text -->
        <!-- ADDED SCHEMATRON IN ANNOT, EVENT, AND INSTRVOICEGRP BREAKS BACKWARD COMPATIBILITY! -->
        <elementSpec ident="annot" module="MEI.shared" mode="replace">
          <desc>(annotation) – Provides a short statement explaining the text or indicating the
            basis for an assertion.</desc>
          <classes>
            <memberOf key="att.bibl"/>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.source"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.annot.log"/>
            <memberOf key="att.annot.vis"/>
            <memberOf key="att.annot.ges"/>
            <memberOf key="att.annot.anl"/>
            <memberOf key="att.plist"/>
            <memberOf key="att.responsibility"/>
            <memberOf key="model.annotLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.headLike"/>
                <rng:ref name="model.textcomponentLike"/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="annot_content_constraint" scheme="isoschematron">
            <constraint>
              <sch:rule
                context="mei:annot[mei:head or mei:lg or mei:p or mei:quote or
                mei:table]">
                <sch:assert test="not(mei:head[preceding-sibling::*[not(local-name()='head')]])"
                  >Head elements can only occur at the start of annot.</sch:assert>
                <sch:assert test="not(*[../text()[normalize-space()]])">Mixed content is not allowed
                  when head, lg, p, quote, or table is used.</sch:assert>
                <sch:assert
                  test="not(*[not(local-name() eq 'biblList' or local-name() eq 'castList'
                  or local-name() eq 'head' or local-name() eq 'lg' or local-name() eq 'list' or
                  local-name() eq 'p' or local-name() eq 'quote' or local-name()
                  eq 'table')])"
                  >Unstructured text not allowed when head, lg, p, quote, or table elements are
                  used.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The <gi scheme="MEI">annot</gi> element can be used for both general comments and for
              annotations of the musical text. It provides a way to group participating *events*
              and/or *control events*, for example, the notes that form a descending bass line, and
              provide a label for and comment regarding the group. Participating entities may be
              identified in the <att>plist</att> attribute. An editorial or analytical comment or
              observation may be included directly within the <gi scheme="MEI">annot</gi> element.
              The starting point of the annotation may be indicated by either a <att>tstamp</att>,
                <att>tstamp.ges</att>, <att>tstamp.real</att> or <att>startid</att> attribute, while
              the ending point may be recorded by either a <att>dur</att>, <att>dur.ges</att> or
                <att>endid</att> attribute. The <att>resp</att> attribute records the editor(s)
              responsible for identifying or creating the annotation.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="castList" module="MEI.shared" mode="replace">
          <desc>Contains a single cast list or dramatis personae.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.listLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:choice>
                <rng:ref name="castItem"/>
                <rng:ref name="castGrp"/>
              </rng:choice>
            </rng:oneOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="contents" module="MEI.header" mode="replace">
          <desc>Description of the material contained within a resource.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.pointing"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:choice>
              <rng:optional>
                <rng:ref name="model.pLike"/>
              </rng:optional>
              <rng:oneOrMore>
                <rng:optional>
                  <rng:ref name="model.labelLike"/>
                </rng:optional>
                <rng:ref name="contentItem"/>
              </rng:oneOrMore>
            </rng:choice>
          </content>
          <exemplum>
            <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:space="preserve">
<contents>
  <p>A suitable tone ; Left hand colouring ; Rhythm and accent ; Tempo ; 
    Flexibility ; Ornaments</p>
</contents>
            </egXML>
          </exemplum>
          <exemplum>
            <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:space="preserve">
<contents>
  <head>Contents</head>
  <label>1.</label><contentItem>Sonata in D major, op. V, no. 1 /
     Corelli</contentItem>
  <label>2.</label><contentItem>Sonata in G minor / Purcell (with Robert Donington,
     gamba)</contentItem>
  <label>3.</label><contentItem>Forlane from Concert royal no. 3 /
     Couperin</contentItem>
</contents>
            </egXML>
          </exemplum>
          <exemplum>
            <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:space="preserve" xmlns:xlink="http://www.w3.org/1999/xlink">
<contents target="http://www.contentProvider.org/toc/toc01.html"/>
            </egXML>
          </exemplum>
        </elementSpec>
        <elementSpec ident="div" module="MEI.text" mode="replace">
          <desc>(division) – Major structural division of text, such as a preface, chapter or
            section.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <!-- <memberOf key="att.typed"/> -->
            <!-- Expand att.typed/@type to provide suggested values -->
            <memberOf key="model.divLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.milestoneLike.text"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:choice>
                <rng:ref name="model.divLike"/>
                <rng:ref name="model.textcomponentLike"/>
              </rng:choice>
            </rng:oneOrMore>
            <rng:zeroOrMore>
              <rng:ref name="model.milestoneLike.text"/>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="type" usage="opt">
              <desc>characterizes the element in some sense, using any convenient classification
                scheme or typology.</desc>
              <valList type="semi">
                <valItem ident="abstract">
                  <desc>A summary of the content of a text as continuous prose.</desc>
                </valItem>
                <valItem ident="ack">
                  <desc>A formal declaration of acknowledgement by the author in which persons and
                    institutions are thanked for their part in the creation of a text.</desc>
                </valItem>
                <valItem ident="appendix">
                  <desc>An ancillary self-contained section of a work, often providing additional
                    but in some sense extra-canonical text.</desc>
                </valItem>
                <valItem ident="bibliography">
                  <desc>A list of bibliographic citations.</desc>
                </valItem>
                <valItem ident="colophon">
                  <desc>A statement appearing at the end of a book describing the conditions of its
                    physical production.</desc>
                </valItem>
                <valItem ident="contents">
                  <desc>A table of contents, specifying the structure of a work and listing its
                    constituents. The list element should be used to mark its structure.</desc>
                </valItem>
                <valItem ident="dedication">
                  <desc>A formal offering or dedication of a text to one or more persons or
                    institutions by the author.</desc>
                </valItem>
                <valItem ident="frontispiece">
                  <desc>A pictorial frontispiece, possibly including some text.</desc>
                </valItem>
                <valItem ident="glossary">
                  <desc>A list of terms associated with definition texts (‘glosses’).</desc>
                </valItem>
                <valItem ident="half-title">
                  <desc>A page containing only the title of a book — as opposed to the title page,
                    which also lists subtitle, author, imprint and similar data.</desc>
                </valItem>
                <valItem ident="index">
                  <desc>Any form of index to the work.</desc>
                </valItem>
                <valItem ident="notes">
                  <desc>A section in which annotations on the textual are gathered together.</desc>
                </valItem>
                <valItem ident="preface">
                  <desc>A foreword or preface addressed to the reader in which the author or
                    publisher explains the content, purpose, or origin of the text.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="subtype" usage="opt">
              <desc>provide any sub-classification for the element, additional to that given by its
                type attribute.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
              <constraintSpec ident="When_subtype" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:*[@subtype]">
                    <sch:assert test="@type">An element with a subtype attribute must have a type
                      attribute.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="event" module="MEI.header" mode="replace">
          <desc>Contains a description of an event, including the dates and locations of its
            occurrence and prominent participants.</desc>
          <!-- This model allows for both semi-structured (using only model.eventPart members) and
            "free" descriptions (using p, table, list, and castList) as well as a mixture of
            the two approaches. -->
          <classes>
            <memberOf key="att.bibl"/>
            <memberOf key="att.calendared"/>
            <memberOf key="att.common"/>
            <memberOf key="att.datable"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.eventPart"/>
                <rng:ref name="model.pLike"/>
                <rng:ref name="model.tableLike"/>
                <rng:ref name="list"/>
                <rng:ref name="castList"/>
              </rng:choice>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="biblList"/>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <elementSpec ident="eventList" module="MEI.header" mode="replace">
          <desc>Contains historical information given as a sequence of significant past
            events.</desc>
          <classes>
            <memberOf key="att.bibl"/>
            <memberOf key="att.common"/>
            <memberOf key="att.typed"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:ref name="event"/>
            </rng:oneOrMore>
            <rng:zeroOrMore>
              <rng:ref name="biblList"/>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>An <gi scheme="MEI">eventList</gi> contains <gi scheme="MEI">event</gi> elements that
              capture a brief description of the associated event, including dates and locations
              where the event took place. An <gi scheme="MEI">eventList</gi> describes events
              associated with a work when it appears in the <gi scheme="MEI">workDesc</gi> element
              or events associated with the custodial history of a given copy of a source for the
              encoding when it appears within the <gi scheme="MEI">source</gi> or <gi scheme="MEI"
                >relatedItem</gi> elements. The <att>type</att> attribute may be used to distinguish
              between event lists with different functions, such as a list of events in the
              compositional process and a list of performance dates.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="history" module="MEI.header" mode="replace">
          <desc>Provides a container for information about the creation and history of a
            resource.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="creation"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="eventList"/>
                <rng:ref name="p"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <elementSpec ident="instrumentation" module="MEI.header" mode="replace">
          <desc>Instrumental and non-dramatic vocal resources.</desc>
          <!-- instrumentation and its subelements should allow att.edit, issue #227 -->
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.edit"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="ensemble"/>
                <rng:ref name="instrVoice"/>
                <rng:ref name="instrVoiceGrp"/>
              </rng:choice>
            </rng:zeroOrMore>
            <!-- Add <annot> for the annotation of complex instrumentation markup and circumstances -->
            <rng:optional>
              <rng:ref name="model.annotLike"/>
            </rng:optional>
          </content>
          <remarks>
            <p>The function of instrumentalists or vocalists is represented by the choice of <gi
                scheme="MEI">ensemble</gi>, <gi scheme="MEI">instrVoice</gi>, and <gi scheme="MEI"
                >instrVoiceGrp</gi> child elements. Arrangements are coded for the medium of the
              work being described, not for the original medium.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="instrVoiceGrp" module="MEI.header" mode="replace">
          <desc>Several instrumental or vocal resources treated as a group.</desc>
          <!-- instrumentation and its subelements should allow att.edit, issue #227 -->
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.coded"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.headLike"/>
                <rng:ref name="instrVoice"/>
                <rng:ref name="instrVoiceGrp"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="instrVoiceGrp_content_constraint" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:instrVoiceGrp[mei:head or mei:instrVoice or mei:instrVoiceGrp]">
                <sch:assert test="not(mei:head[preceding-sibling::*[not(local-name()='head')]])"
                  >Head elements can only occur at the start of instrVoiceGrp.</sch:assert>
                <!-- This rule interferes with the capture of instrumental doublings. -->
                <!--<sch:assert test="not(*[../text()[normalize-space()]])">Mixed content is not allowed
                  when head, instrVoice, or instrVoiceGrp is used.</sch:assert>-->
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
        <elementSpec ident="lg" module="MEI.text" mode="replace">
          <desc>(line group) – May be used for any section of text that is organized as a group of
            lines; however, it is most often used for a group of verse lines functioning as a formal
            unit, e.g. a stanza, refrain, verse paragraph, etc.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.xy"/>
            <memberOf key="model.lgLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:choice>
              <rng:ref name="model.lLike"/>
              <rng:ref name="model.lgLike"/>
            </rng:choice>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.lLike"/>
                <rng:ref name="model.lgLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="notesStmt" module="MEI.header" mode="replace">
          <desc>(notes statement)– Collects any notes providing information about a text additional
            to that recorded in other parts of the bibliographic description.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:ref name="model.annotLike"/>
            </rng:oneOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="perfMedium" module="MEI.header" mode="replace">
          <desc>(performance medium) – Indicates the number and character of the performing forces
            used in a musical composition.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.authorized"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="castList"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="instrumentation"/>
            </rng:optional>
          </content>
          <remarks>
            <p>The function of instrumentalists or vocalists is represented by the choice of <gi
                scheme="MEI">ensemble</gi> and <gi scheme="MEI">performer</gi> child elements.
              Arrangements are coded for the medium of the work being described, not for the
              original medium.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="sourceDesc" module="MEI.header" mode="replace">
          <desc>(source description) – A container for the descriptions of the source(s) used in the
            creation of the electronic file.</desc>
          <classes>
            <memberOf key="att.common"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:ref name="source"/>
            </rng:oneOrMore>
          </content>
          <remarks>
            <p>This element is recommended where the MEI file is a transcription of existing music,
              but is not required when the data is originally created in MEI form.</p>
          </remarks>
        </elementSpec>

        <!-- Enforce constraints on attribute targets, issue #226 -->
        <!-- Add constraintSpec to att.altsym -->
        <classSpec ident="att.altsym" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes supplying pointers to user-defined symbols.</desc>
          <attList>
            <attDef ident="altsym" usage="opt">
              <desc>provides a way of pointing to a user-defined symbol. It must contain an ID of a
                &lt;symbolDef&gt; element elsewhere in the document.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_altsymTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@altsym">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@altsym
                      attribute has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:symbolDef/@xml:id"
                      >The value in @altsym must correspond to the @xml:id attribute of a symbolDef
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.common.anl -->
        <classSpec ident="att.common.anl" module="MEI.analysis" type="atts" mode="replace">
          <desc>Common analytical attributes. When the meiLinkAlign module is used, the when
            attribute is also a member of this attribute class.</desc>
          <classes>
            <memberOf key="att.alignment"/>
          </classes>
          <attList>
            <attDef ident="copyof" usage="opt">
              <desc>points to an element of which the current element is a copy.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="When_copyof_element_empty" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:*[@copyof]">
                    <sch:assert test="count(child::node()) = 0">An element with a copyof attribute
                      cannot have content.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
              <constraintSpec ident="check_copyofTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@copyof">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@copyof
                      attribute has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*/@xml:id"
                      >The value in @copyof must correspond to the @xml:id attribute of an
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="corresp" usage="opt">
              <desc>used to point to other elements that correspond to this one in a generic
                fashion.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_correspTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@corresp">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@corresp
                      attribute has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*/@xml:id"
                      >Each value in @corresp must correspond to the @xml:id attribute of an
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="next" usage="opt">
              <desc>used to point to the next event(s) in a user-defined collection.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_nextTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@next">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@next attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*/@xml:id"
                      >Each value in @next must correspond to the @xml:id attribute of an
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="prev" usage="opt">
              <desc>points to the previous event(s) in a user-defined collection.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_prevTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@prev">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@prev attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*/@xml:id"
                      >Each value in @prev must correspond to the @xml:id attribute of an
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="sameas" usage="opt">
              <desc>points to an element that is the same as the current element but is not a
                literal copy of the current element.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_sameasTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@sameas">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@sameas
                      attribute has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*/@xml:id"
                      >Each value in @sameas must correspond to the @xml:id attribute of an
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="synch" usage="opt">
              <desc>points to elements that are synchronous with the current element.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_synchTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@synch">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@synch attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*/@xml:id"
                      >Each value in @synch must correspond to the @xml:id attribute of an
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Create new att.classcodeident class -->
        <classSpec ident="att.classcodeident" module="MEI.shared" type="atts" mode="add">
          <attList>
            <attDef ident="classcode" usage="opt">
              <desc>contains a reference to the controlled vocabulary from which the term is drawn.
                The value must match the value of an ID attribute on a classCode element given
                elsewhere in the document.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_classcodeTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@classcode">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@classcode
                      attribute has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:classCode/@xml:id"
                      >The value in @classcode must correspond to the @xml:id attribute of a
                      classCode element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Make term member of att.classcodeident -->
        <elementSpec ident="term" module="MEI.header" mode="replace">
          <desc>Keyword or phrase which describes a resource.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.classcodeident"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="term"/>
                <rng:ref name="model.textphraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>The <att>classcode</att> attribute may be used to link the term to a terminological
              source given in a <gi scheme="MEI">classCode</gi> element. The <gi scheme="MEI"
                >term</gi> element may include other <gi scheme="MEI">term</gi> elements in order to
              allow the creation of coordinated terms; i.e., terms created from a combination of
              other, independent terms.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <!-- Add constraintSpec in att.custos.log -->
        <classSpec ident="att.custos.log" module="MEI.shared" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.pitched"/>
          </classes>
          <attList>
            <attDef ident="target" usage="opt">
              <desc>encodes the target note when its pitch differs from the pitch at which the
                custos appears.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_goalTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:custos/@target">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@target
                      attribute has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:note/@xml:id"
                      >The value in @target must correspond to the @xml:id attribute of a note
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.datapointing -->
        <classSpec ident="att.datapointing" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes for linking metadata to data.</desc>
          <attList>
            <attDef ident="data" usage="opt">
              <desc>used to link metadata elements to one or more data-containing elements.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_dataTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@data">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@data attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*[ancestor::mei:music]/@xml:id"
                      >The value in @data must correspond to the @xml:id attribute of a descendant
                      of the music element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.declaring -->
        <classSpec ident="att.declaring" module="MEI.shared" type="atts" mode="replace">
          <desc>provides attributes for elements which may be associated with particular contextual
            elements within the header.</desc>
          <attList>
            <attDef ident="decls" usage="opt">
              <desc>identifies one or more metadata elements within the header, which are understood
                to apply to the element bearing this attribute and its content.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_dataTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@decls">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@decls attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*[ancestor::mei:meiHead]/@xml:id"
                      >Each value in @decls must correspond to the @xml:id attribute of an element
                      within the metadata header.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.facsimile -->
        <classSpec ident="att.facsimile" module="MEI.facsimile" type="atts" mode="replace">
          <desc>Attributes that associate a feature corresponding with all or part of an
            image.</desc>
          <attList>
            <attDef ident="facs" usage="opt">
              <desc>permits the current element to reference a facsimile surface or image zone which
                corresponds to it.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_facsTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@facs">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@facs attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*[local-name() eq 'surface' or local-name() eq
                      'zone']/@xml:id"
                      >Each value in @facs must correspond to the @xml:id attribute of a surface or
                      zone element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.handident -->
        <classSpec ident="att.handident" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes which identify a document hand.</desc>
          <attList>
            <attDef ident="hand" usage="opt">
              <desc>signifies the hand responsible for an action. The value must be the ID of a
                &lt;hand&gt; element declared in the header.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_handTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@hand">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@hand attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:hand/@xml:id"
                      >Each value in @hand must correspond to the @xml:id attribute of a hand
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.harm.log -->
        <classSpec ident="att.harm.log" module="MEI.harmony" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.controlevent"/>
            <memberOf key="att.augmentdots"/>
            <memberOf key="att.duration.additive"/>
            <memberOf key="att.startendid"/>
            <memberOf key="att.timestamp2.musical"/>
          </classes>
          <attList>
            <attDef ident="chordref" usage="opt">
              <desc>contains a reference to a &lt;chordDef&gt; element elsewhere in the
                document.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_chordrefTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@chordref">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@chordref
                      attribute has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:chordDef/@xml:id"
                      >The value in @chordref must correspond to the @xml:id attribute of a chordDef
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.instrumentident -->
        <classSpec ident="att.instrumentident" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes which identify a MIDI instrument.</desc>
          <attList>
            <attDef ident="instr" usage="opt">
              <desc>provides a way of pointing to a MIDI instrument definition. It must contain the
                ID of an &lt;instrDef&gt; element elsewhere in the document.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_instrTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@instr">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@instr attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:instrDef/@xml:id"
                      >The value in @instr must correspond to the @xml:id attribute of an instrDef
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.joined -->
        <classSpec ident="att.joined" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes indicating that elements are semantically linked; that is, while the
            parts are encoded separately, together they may be thought of as a single intellectual
            object.</desc>
          <attList>
            <attDef ident="join" usage="opt">
              <desc>used for linking visually separate entities that form a single logical entity,
                for example, multiple slurs broken across a system break that form a single musical
                phrase. Also used to indicate a measure which metrically completes the current one.
                Record the identifiers of the separately encoded components, excluding the one
                carrying the attribute.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_joinTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@join">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@join attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*/@xml:id"
                      >Each value in @join must correspond to the @xml:id attribute of an
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.layer.log -->
        <classSpec ident="att.layer.log" module="MEI.shared" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.meterconformance"/>
          </classes>
          <attList>
            <attDef ident="def">
              <desc>provides a mechanism for linking the layer to a layerDef element.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_defTarget_layer" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@def">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@def attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:layerDef/@xml:id"
                      >The value in @def must correspond to the @xml:id attribute of a layerDef
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.plist -->
        <classSpec ident="att.plist" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes listing the participants in a user-defined collection.</desc>
          <attList>
            <attDef ident="plist" usage="opt">
              <desc>contains a space separated list of references that identify logical events that
                participate in a collection, such as notes under a phrase mark.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_plistTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@plist">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@plist attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*/@xml:id"
                      >Each value in @plist must correspond to the @xml:id attribute of an
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="evaluate" usage="opt">
              <desc>specifies the intended meaning when the target of a pointer is itself a
                pointer.</desc>
              <valList type="closed">
                <valItem ident="all">
                  <desc>if the element pointed to is itself a pointer, then the target of that
                    pointer will be taken, and so on, until an element is found which is not a
                    pointer.</desc>
                </valItem>
                <valItem ident="one">
                  <desc>if the element pointed to is itself a pointer, then its target (whether a
                    pointer or not) is taken as the target of this pointer.</desc>
                </valItem>
                <valItem ident="none">
                  <desc>no further evaluation of targets is carried out beyond that needed to find
                    the element specified in the pointer's target.</desc>
                </valItem>
              </valList>
              <remarks>
                <p>If no value is given, the application program is responsible for deciding
                  (possibly on the basis of user input) how far to trace a chain of pointers.</p>
              </remarks>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.source -->
        <classSpec ident="att.source" module="MEI.critapp" type="atts" mode="replace">
          <desc>Attributes common to elements that may refer to a source.</desc>
          <attList>
            <attDef ident="source" usage="opt">
              <desc>contains a list of one or more pointers indicating the sources which attest to a
                given reading. Each value should correspond to the ID of a &lt;source&gt; element
                located in the document header.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_sourceTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@source">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@source
                      attribute has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:source/@xml:id"
                      >Each value in @source must correspond to the @xml:id attribute of a source
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.staff.log -->
        <classSpec ident="att.staff.log" module="MEI.shared" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.meterconformance"/>
          </classes>
          <attList>
            <attDef ident="def">
              <desc>provides a mechanism for linking the staff to a staffDef element.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_defTarget_staff" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@def">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@def attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:staffDef/@xml:id"
                      >The value in @def must correspond to the @xml:id attribute of a staffDef
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.startendid -->
        <classSpec ident="att.startendid" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes recording the identifiers of the first and last elements of a sequence of
            elements to which the current element is associated.</desc>
          <classes>
            <memberOf key="att.startid"/>
          </classes>
          <attList>
            <attDef ident="endid" usage="opt">
              <desc>indicates the final element in a sequence of events to which the feature
                applies.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_endidTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@endid">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@endid attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*/@xml:id"
                      >The value in @endid must correspond to the @xml:id attribute of an
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec in att.start -->
        <classSpec ident="att.startid" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that identify a relative starting point.</desc>
          <attList>
            <attDef ident="startid" usage="opt">
              <desc>holds a reference to the first element in a sequence of events to which the
                feature applies.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_startidTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@startid">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@startid
                      attribute has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*/@xml:id"
                      >The value in @startid must correspond to the @xml:id attribute of an
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec to att.responsibility -->
        <classSpec ident="att.responsibility" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes capturing information regarding responsibility for some aspect of the
            text's creation, transcription, editing, or encoding.</desc>
          <constraintSpec ident="check_respTarget" scheme="isoschematron">
            <constraint>
              <sch:rule context="@resp">
                <sch:assert role="warning" test="not(normalize-space(.) eq '')">@resp attribute has
                  no content.</sch:assert>
                <sch:assert role="warning"
                  test="every $i in tokenize(., '\s+') satisfies
                  substring($i,2)=//mei:*[ancestor::mei:meiHead]/@xml:id"
                  >The value in @resp must correspond to the @xml:id attribute of an element within
                  the metadata header.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="resp" usage="opt">
              <desc>captures information regarding responsibility for some aspect of the text's
                creation, transcription, editing, or encoding. Its value must point to one or more
                identifiers declared in the document header.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
              <constraintSpec ident="check_respTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@resp">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@resp attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:*[ancestor::mei:meiHead]/@xml:id"
                      >The value in @resp must correspond to the @xml:id attribute of an element
                      within the metadata header.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Add constraintSpec to handShift -->
        <elementSpec ident="handShift" module="MEI.edittrans" mode="replace">
          <desc>Marks the beginning of a passage written in a new hand, or of a change in the
            scribe, writing style, ink or character of the document hand.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.medium"/>
            <memberOf key="model.transcriptionLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <attList>
            <attDef ident="character" usage="opt">
              <desc>describes the character of the new hand.</desc>
              <datatype>
                <rng:text/>
              </datatype>
            </attDef>
            <attDef ident="new" usage="opt">
              <desc>identifies the new hand. The value must contain the ID of a hand element given
                elsewhere in the document.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_newTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@new">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@new attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:hand/@xml:id"
                      >The value in @new must correspond to the @xml:id attribute of a hand
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="old" usage="opt">
              <desc>identifies the old hand. The value must contain the ID of a hand element given
                elsewhere in the document.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_oldTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@old">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@old attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies
                      substring($i,2)=//mei:hand/@xml:id"
                      >The value in @old must correspond to the @xml:id attribute of a hand
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>character</att> attribute describes characteristics of the hand,
              particularly those related to the quality of the writing, e.g., 'shaky', 'thick',
              regular'. A description of the tint or type of ink, e.g. 'brown' or the writing
              medium, e.g. 'pencil', may be placed in the <att>medium</att> attribute. The new hand
              may be identified using the <att>new</att> attribute, while the previous hand may be
              recorded in the <att>old</att> attribute. The <att>resp</att> attribute contains an ID
              reference to an element containing the name of the editor or transcriber responsible
              for identifying the change of hand. The <att>cert</att> attribute signifies the degree
              of certainty ascribed to the identification of the new hand.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>

        <!-- instrumentation and its subelements should allow att.edit, issue #227 -->
        <!-- instrumentation and instrVoiceGrp addressed elsewhere -->
        <elementSpec ident="ensemble" module="MEI.header" mode="replace">
          <desc>The name of a standard instrumental or vocal grouping, such as 'orchestra' or
            'marching band'.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.coded"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:text/>
          </content>
          <remarks>
            <p>It is recommended that name values (recorded in the <att>code</att> attribute or in
              the element's content) be taken from a standardized list, such as the IAML
              (International Association of Music Libraries) Medium of Performance Codes List or the
              MARC Instruments and Voices Code List.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="instrVoice" module="MEI.header" mode="replace">
          <desc>(instrument or voice) – Name of an instrument on which a performer plays or a
            performer's voice range.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.coded"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="instrVoice"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="count" usage="opt">
              <desc>indicates the number of performers.</desc>
              <datatype>
                <rng:data type="positiveInteger"/>
              </datatype>
            </attDef>
            <attDef ident="solo" usage="opt">
              <desc>marks this instrument or vocal part as a soloist. Do not use this attribute for
                a solo instrument which is not accompanied.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p><gi scheme="MEI">instrVoice</gi> is permitted to contain <gi scheme="MEI"
                >instrVoiceGrp</gi> for those situations where a group of instruments is performed
              upon by a single player or group of players, i.e., doubling.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="expression" module="MEI.frbr" mode="replace">
          <desc>Intellectual or artistic realization of a work.</desc>
          <classes>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="model.expressionLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.identifierLike"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="titleStmt"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:ref name="model.workIdent"/>
            </rng:zeroOrMore>
            <!-- Allow otherChar to be repeatable -->
            <rng:zeroOrMore>
              <rng:ref name="otherChar"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="history"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="langUsage"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="perfMedium"/>
            </rng:optional>
            <!-- Allow extent to be repeatable -->
            <rng:zeroOrMore>
              <rng:ref name="extent"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="scoreFormat"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="contents"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="context"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:ref name="biblList"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="notesStmt"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="classification"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="componentGrp"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="relationList"/>
            </rng:optional>
          </content>
        </elementSpec>
        <!-- Do some re-ordering to better align with work and expression content. -->
        <!-- THIS CHANGE BREAKS BACKWARD COMPATIBILITY! -->
        <elementSpec ident="source" module="MEI.header" mode="replace">
          <desc>A bibliographic description of a source used in the creation of the electronic
            file.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.pointing"/>
            <memberOf key="model.manifestationLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.identifierLike"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="titleStmt"/>
            </rng:optional>
            <rng:ref name="macro.bibldescPart"/>
            <rng:optional>
              <rng:ref name="langUsage"/>
            </rng:optional>
            <!-- Allow repeatable <perfMedium> within <source>? -->
            <!--<rng:zeroOrMore>
              <rng:ref name="perfMedium"/>
            </rng:zeroOrMore>-->
            <rng:optional>
              <rng:ref name="contents"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:ref name="biblList"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="notesStmt"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="classification"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="itemList"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="componentGrp"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="relationList"/>
            </rng:optional>
          </content>
          <remarks>
            <p>Multiple <gi scheme="MEI">physDesc</gi> sub-elements may be used to describe the
              physically separate parts of a single source. The <att>data</att> attribute may be
              used to reference one or more features that occur in this particular source. A URI
              referencing a description of the related item may be placed in the <att>target</att>
              attribute.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on elements in the Text Encoding Initiative (TEI) and
              Encoded Archival Description (EAD) standards.</p>
          </remarks>
        </elementSpec>
        <!-- Make <scoreFormat> a member of model.physDescPart -->
        <elementSpec ident="scoreFormat" module="MEI.header" mode="replace">
          <desc>Describes the type of score used to represent a musical composition (e.g., short
            score, full score, condensed score, close score, etc.).</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.physDescPart"/>
          </classes>
          <content>
            <rng:text/>
          </content>
        </elementSpec>

        <!-- Allow app within verse, issue #228 -->
        <elementSpec ident="verse" module="MEI.lyrics" mode="replace">
          <desc>Lyric verse.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.verse.log"/>
            <memberOf key="att.verse.vis"/>
            <memberOf key="att.verse.ges"/>
            <memberOf key="att.verse.anl"/>
            <memberOf key="model.verseLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="dir"/>
                <rng:ref name="dynam"/>
                <rng:ref name="tempo"/>
                <rng:ref name="space"/>
              </rng:choice>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:choice>
                <rng:ref name="model.sylLike"/>
                <rng:ref name="model.appLike"/>
              </rng:choice>
            </rng:oneOrMore>
            <rng:zeroOrMore>
              <rng:ref name="model.lbLike"/>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>The <gi scheme="MEI">lb</gi> element is allowed here in order to facilitate karaoke
              applications. The <att>func</att> attribute on <gi scheme="MEI">lb</gi> may be used to
              distinguish true line endings from those of line groups for these applications.</p>
          </remarks>
        </elementSpec>

        <!-- Allow staffDef to specify the type [and subtype] of notation that occurs on it, issue #229 -->
        <!-- Add datatype -->
        <macroSpec ident="data.NOTATIONTYPE" module="MEI" type="dt" mode="add">
          <desc>Notation type and subtype</desc>
          <content>
            <rng:choice>
              <rng:value>cmn</rng:value>
              <a:documentation>Common Music Notation</a:documentation>
              <rng:value>mensural</rng:value>
              <a:documentation>Mensural notation</a:documentation>
              <rng:value>mensural.black</rng:value>
              <a:documentation>Black mensural notation</a:documentation>
              <rng:value>mensural.white</rng:value>
              <a:documentation>White mensural notation</a:documentation>
              <rng:value>neume</rng:value>
              <a:documentation>Neumatic notation</a:documentation>
              <!--<rng:value>neume.heighted</rng:value>
              <a:documentation>Heighted neumatic notation</a:documentation>
              <rng:value>neume.unheighted</rng:value>
              <a:documentation>Unheighted neumatic notation</a:documentation>-->
              <rng:value>tab</rng:value>
              <a:documentation>Tablature notation</a:documentation>
            </rng:choice>
          </content>
        </macroSpec>
        <!-- Add notationtype attribute class -->
        <classSpec ident="att.notationtype" module="MEI" type="atts" mode="add">
          <desc>Attributes that provide for classification of notation.</desc>
          <attList>
            <attDef ident="notationtype">
              <desc>Contains classification of the notation contained or described by the element
                bearing this attribute.</desc>
              <datatype>
                <rng:ref name="data.NOTATIONTYPE"/>
              </datatype>
            </attDef>
            <attDef ident="notationsubtype">
              <desc>provides any sub-classification of the notation contained or described by the
                element, additional to that given by its notationtype attribute.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
              <constraintSpec ident="When_notationsubtype" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:*[@notationsubtype]">
                    <sch:assert test="@notationtype">An element with a notationsubtype attribute
                      must have a notationtype attribute.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        <!-- Make att.staffDef.log a member of att.notationtype -->
        <classSpec ident="att.staffDef.log" module="MEI.shared" type="atts" mode="replace">
          <desc>Logical domain attributes for staffDef.</desc>
          <classes>
            <memberOf key="att.cleffing.log"/>
            <memberOf key="att.duration.default"/>
            <memberOf key="att.keySigDefault.log"/>
            <memberOf key="att.meterSigDefault.log"/>
            <memberOf key="att.notationtype"/>
            <memberOf key="att.octavedefault"/>
            <memberOf key="att.transposition"/>
            <memberOf key="att.staffDef.log.cmn"/>
            <memberOf key="att.staffDef.log.mensural"/>
          </classes>
        </classSpec>

        <!-- Make more elements members of att.typed -->
        <elementSpec ident="bibl" module="MEI.shared" mode="replace">
          <desc>(bibliographic reference) – Provides a loosely-structured bibliographic citation in
            which the sub-components may or may not be explicitly marked.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.pointing"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.biblLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.biblPart"/>
                <rng:ref name="model.imprintPart"/>
                <rng:ref name="model.textphraseLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <!-- To produce a more strict bibliographic citation, the following content model may be used: -->
          <!-- <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.titleLike"/>
                <rng:ref name="model.identifierLike"/>
                <rng:ref name="model.annotLike"/>
                <rng:ref name="model.biblPart"/>
                <rng:ref name="imprint"/>
                <rng:ref name="creation"/>
                <rng:ref name="genre"/>
                <rng:ref name="relatedItem"/>
              </rng:choice>
            </rng:zeroOrMore>
           </content> -->
          <remarks>
            <p><gi scheme="MEI">bibl</gi> may contain a mix of text and more specific elements such
              as <gi scheme="MEI">title</gi>, <gi scheme="MEI">edition</gi>, <gi scheme="MEI"
                >persName</gi>, and <gi scheme="MEI">corpName</gi>. This element may also function
              as a hypertext reference to an external electronic resource. Do not confuse this
              element with <gi scheme="MEI">ref</gi>, which does not provide special bibliographic
              sub-elements.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on elements in the Text Encoding Initiative (TEI) and
              Encoded Archival Description (EAD) standards.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="change" module="MEI.header" mode="replace">
          <desc>Individual change within the revision description.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.datable"/>
            <memberOf key="att.responsibility"/>
            <memberOf key="att.typed"/>
          </classes>
          <content>
            <rng:optional>
              <rng:ref name="respStmt"/>
            </rng:optional>
            <rng:ref name="changeDesc"/>
            <rng:optional>
              <rng:ref name="model.dateLike"/>
            </rng:optional>
          </content>
          <constraintSpec ident="change_requirements" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:change">
                <sch:assert test="@isodate or mei:date">The date of the change must be recorded in
                  an isodate attribute or date element.</sch:assert>
                <sch:assert test="@resp or mei:respStmt">The person responsible for the change must
                  be recorded in a resp attribute or respStmt element.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>Additions, deletions, and significant recoding should be noted, but not correction of
              minor typographical errors. It is recommended that revisions should be entered in
              reverse chronological order, with the most recent <gi scheme="MEI">change</gi> first.
              The <att>resp</att> attribute contains a pointer to an element containing info about
              the person/entity responsible for change. The <gi scheme="MEI">edition</gi> element
              can be used to designate an MEI encoding that has been so substantively changed that
              it constitutes a new version that supersedes earlier versions.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Encoded Archival Description (EAD)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="corr" module="MEI.edittrans" mode="replace">
          <desc>(correction) – Contains the correct form of an apparent erroneous passage.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.trans"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.choicePart"/>
            <memberOf key="model.substPart"/>
            <memberOf key="model.transcriptionLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="model.eventLike"/>
                <rng:ref name="model.eventLike.neumes"/>
                <rng:ref name="model.controleventLike"/>
                <rng:ref name="model.lyricsLike"/>
                <rng:ref name="model.midiLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.eventLike.measureFilling"/>
                <rng:ref name="model.noteModifierLike"/>
                <rng:ref name="model.sectionLike"/>
                <rng:ref name="model.measureLike"/>
                <rng:ref name="model.staffLike"/>
                <rng:ref name="model.layerLike"/>
                <rng:ref name="model.graphicprimitiveLike"/>
                <rng:ref name="model.fLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>The <att>cert</att> attribute signifies the degree of certainty ascribed to
              correction. The <att>resp</att> attribute contains an ID reference to an element
              containing the name of the editor or transcriber responsible for suggesting the
              correction held as the content of the <gi scheme="MEI">corr</gi> element. If the
              correction was made in the source, resp should be used to identify the hand of the
              corrector. The value of resp must point to one or more identifiers declared in the
              document header.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="date" module="MEI.shared" mode="replace">
          <desc>A string identifying a point in time or the time period between two such
            points.</desc>
          <classes>
            <memberOf key="att.bibl"/>
            <memberOf key="att.calendared"/>
            <memberOf key="att.common"/>
            <memberOf key="att.datable"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.dateLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on elements in the Text Encoding Initiative (TEI) and
              Encoded Archival Description (EAD) standards.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="fig" module="MEI.figtable" mode="replace">
          <desc>(figure) – groups elements representing or containing graphic information such as an
            illustration or figure.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.xy"/>
            <memberOf key="model.figureLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.captionLike"/>
                <rng:ref name="figDesc"/>
                <rng:ref name="model.graphicLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is modelled on the figure element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <classSpec ident="att.pb.log" module="MEI.shared" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.typed"/>
          </classes>
        </classSpec>
        <elementSpec ident="ptr" module="MEI.ptrref" mode="replace">
          <desc>(pointer) – Defines a pointer to another location, using only attributes to describe
            the destination.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.internetmedia"/>
            <memberOf key="att.pointing"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.locrefLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <remarks>
            <p>Unlike the <gi scheme="MEI">ref</gi> element, <gi scheme="MEI">ptr</gi> cannot
              contain text or sub-elements to describe the referenced object.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on elements in the Encoded Archival Description (EAD) and
              Text Encoding Initiative (TEI) standards.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="quote" module="MEI.text" mode="replace">
          <desc>(block quote) – A formatting element that designates an extended quotation; that is,
            a passage attributed to a source external to the text and normally set off from the text
            by spacing or other typographic distinction.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.xy"/>
            <memberOf key="model.quoteLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.paracontentPart"/>
                <rng:ref name="p"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>The source for the quote may be included in the optional <gi scheme="MEI">bibl</gi>
              sub-element. Use <gi scheme="MEI">rend</gi> for words that are enclosed in quotation
              marks for emphasis or for a short quoted phrase that occurs within a line of text.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on elements found in HTML, TEI, and EAD standards.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="ref" module="MEI.ptrref" mode="replace">
          <desc>(reference) – Defines a reference to another location that may contain text and
            sub-elements to describe the destination.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.internetmedia"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.pointing"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.locrefLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>Unlike the <gi scheme="MEI">ptr</gi> element, <gi scheme="MEI">ref</gi> may contain
              text and sub-elements to describe the destination.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on elements in the Encoded Archival Description (EAD) and
              TEI standards.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="relatedItem" module="MEI.shared" mode="replace">
          <desc>(related item) – Contains or references another bibliographic item which is related
            to the present one.</desc>
          <classes>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.pointing"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.biblPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.biblLike"/>
                <!-- ptr/ref children aren't necessary as relatedItem is a member of att.pointing. -->
                <!--<rng:ref name="model.locrefLike"/>-->
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="rel" usage="req">
              <desc>describes the relationship between the &lt;relatedItem&gt; and the resource
                described in the parent element, i.e., &lt;bibl&gt;, &lt;source&gt; or
                &lt;relatedItem&gt;. The values are based on MODS version 3.4. The subject of these
                relations is always the &lt;relatedItem&gt;, and the object is always the parent of
                the &lt;relatedItem&gt;. "preceding" and "succeeding" indicate temporal
                order.</desc>
              <valList type="closed">
                <valItem ident="preceding">
                  <desc>predecessor of the resource</desc>
                </valItem>
                <valItem ident="succeeding">
                  <desc>successor to the resource</desc>
                </valItem>
                <valItem ident="original">
                  <desc>original form of the resource</desc>
                </valItem>
                <valItem ident="host">
                  <desc>parent containing the resource</desc>
                </valItem>
                <valItem ident="constituent">
                  <desc>intellectual or physical component of the resource</desc>
                </valItem>
                <valItem ident="otherVersion">
                  <desc>version of the resource's intellectual content not changed enough to be a
                    different work</desc>
                </valItem>
                <valItem ident="otherFormat">
                  <desc>version of the resource in a different physical format</desc>
                </valItem>
                <valItem ident="isReferencedBy">
                  <desc>published bibliographic description, review, abstract, or index of the
                    resource's content</desc>
                </valItem>
                <valItem ident="references">
                  <desc>cited or referred to in the resource</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </elementSpec>
        <elementSpec ident="surface" module="MEI.facsimile" mode="replace">
          <desc>Defines a writing surface in terms of a rectangular coordinate space, optionally
            grouping one or more graphic representations of that space, and rectangular zones of
            interest within it.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.coordinated"/>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.figDescLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="model.graphicLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="zone"/>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>The <att>startid</att> attribute may be used to hold a reference to the first feature
              occurring on this surface.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>

        <!-- Minor amendments to documentation -->
        <classSpec ident="att.meterconformance" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that provide information about a structure's conformance to the
            prevailing meter.</desc>
          <attList>
            <attDef ident="metcon" usage="opt">
              <desc>indicates the relationship between the content of a staff or layer and the
                prevailing meter.</desc>
              <valList type="closed">
                <valItem ident="c">
                  <desc>complete; i.e., conformant with the prevailing meter.</desc>
                </valItem>
                <valItem ident="i">
                  <desc>incomplete; i.e., not enough beats.</desc>
                </valItem>
                <valItem ident="o">
                  <desc>overfull; i.e., too many beats.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.typed" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes which can be used to classify or sub-classify features.</desc>
          <attList>
            <attDef ident="type" usage="opt">
              <desc>characterizes the element in some sense, using any convenient classification
                scheme or typology.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
            </attDef>
            <attDef ident="subtype" usage="opt">
              <desc>provide any sub-classification for the element, additional to that given by its
                type attribute.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
              <constraintSpec ident="When_subtype" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:*[@subtype]">
                    <sch:assert test="@type">An element with a subtype attribute must have a type
                      attribute.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
          <remarks>
            <p>When appropriate, values from an established typology should be used. Alternatively,
              a typology may be defined in the associated MEI header using the <gi scheme="MEI"
                >classification</gi> element. If values are to be taken from a project-specific
              list, this should be defined using the <gi scheme="MEI">valList</gi> element in a
              project-specific schema description.</p>
          </remarks>
        </classSpec>
        <elementSpec ident="avFile" module="MEI.performance" mode="replace">
          <desc>(audio/video file) – References an external digital audio or video file.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.internetmedia"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.pointing"/>
            <memberOf key="att.typed"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="clip"/>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="avFile_child_of_clip" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:clip/mei:avFile">
                <sch:assert test="count(mei:*) = 0">An avFile child of clip cannot have
                  children</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>This element is analogous to the <gi scheme="MEI">graphic</gi> element in the
              figtable module.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="barLine" module="MEI.shared" mode="replace">
          <desc>Vertical line drawn through one or more staves that divides musical notation into
            metrical units.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.pointing"/>
            <memberOf key="att.barLine.log"/>
            <memberOf key="att.barLine.vis"/>
            <memberOf key="att.barLine.ges"/>
            <memberOf key="att.barLine.anl"/>
            <memberOf key="model.eventLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="Check_barLinetaktplace" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:barLine[@taktplace]">
                <sch:let name="staff" value="ancestor::mei:staff/@n"/>
                <sch:let name="staffpos"
                  value="count(ancestor::mei:staff/preceding-sibling::mei:staff) + 1"/>
                <sch:assert
                  test="number(@taktplace) &lt;= number(2 *
                  preceding::mei:staffDef[@n=$staff and @lines][1]/@lines)"
                />
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>barLine is provided for repertoires, such as mensural notation, that lack measures.
              Because the <gi scheme="MEI">barLine</gi> element's attributes, from which the logical
              and visual characteristics of the bar line can be discerned, largely duplicate those
              of measure, the use of barLine is not necessary within <gi scheme="MEI">measure</gi>
              elements in CMN. On <gi scheme="MEI">barLine</gi> the <att>width</att> attribute
              captures the width of the preceding measure for interchange with music printing
              systems that utilize this information for printing.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="measure" module="MEI.cmn" mode="replace">
          <desc>Unit of musical time consisting of a fixed number of note-values of a given type, as
            determined by the prevailing meter, and delimited in musical notation by bar
            lines.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.pointing"/>
            <memberOf key="att.measure.log"/>
            <memberOf key="att.measure.vis"/>
            <memberOf key="att.measure.ges"/>
            <memberOf key="att.measure.anl"/>
            <memberOf key="model.measureLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.appLike"/>
                <rng:ref name="model.divLike"/>
                <rng:ref name="model.milestoneLike.music"/>
                <rng:ref name="model.staffDefLike"/>
                <rng:ref name="model.annotLike"/>
                <rng:ref name="model.graphicprimitiveLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.measurePart"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>In MEI, the <gi scheme="MEI">measure</gi> element is a grouping mechanism for events
              and control events. Pointing attributes make it possible to connect this element to
              other internal or external entities, such as media objects or annotations. The
                <att>width</att> attribute may be used to capture the width of the measure for
              interchange with music printing systems that utilize this information for
              printing.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="persName" module="MEI.shared" mode="replace">
          <desc>Proper noun or noun phrase.</desc>
          <classes>
            <memberOf key="att.bibl"/>
            <memberOf key="att.common"/>
            <memberOf key="att.datable"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.name"/>
            <!-- <memberOf key="att.typed"/> -->
            <!-- Expand att.typed/@type to provide suggested values -->
            <memberOf key="model.nameLike.agent"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="type" usage="opt">
              <desc>characterizes the element in some sense, using any convenient classification
                scheme or typology.</desc>
              <valList type="semi">
                <valItem ident="forename">
                  <desc>contains a forename, given or baptismal name.</desc>
                </valItem>
                <valItem ident="surname">
                  <desc>a family (inherited) name, as opposed to a given, baptismal, or nick
                    name.</desc>
                </valItem>
                <valItem ident="rolename">
                  <desc>contains a name component which indicates that the referent has a particular
                    role or position in society, such as an official title or rank.</desc>
                </valItem>
                <valItem ident="addname">
                  <desc>contains an additional name component, such as a nickname, epithet, or
                    alias, or any other descriptive phrase used within a personal name.</desc>
                </valItem>
                <valItem ident="namelink">
                  <desc>contains a connecting phrase or link used within a name but not regarded as
                    part of it, such as "van der" or "of".</desc>
                </valItem>
                <valItem ident="genname">
                  <desc>contains a name component used to distinguish otherwise similar names on the
                    basis of the relative ages or generations of the persons named.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="subtype" usage="opt">
              <desc>provide any sub-classification for the element, additional to that given by its
                type attribute.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
              <constraintSpec ident="When_subtype" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:*[@subtype]">
                    <sch:assert test="@type">An element with a subtype attribute must have a type
                      attribute.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
          <remarks>
            <p>Name sub-parts may be recorded in <gi scheme="MEI">persName</gi> sub-elements. The
              name of the list from which a controlled value is taken may be recorded using the
                <att>authority</att> attribute.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Encoded Archival Description (EAD)
              standard.</p>
          </remarks>
        </elementSpec>

        <!-- Fix problem with string *courses* -->
        <classSpec ident="att.staffDef.ges.tablature" module="MEI.tablature" type="atts"
          mode="replace">
          <desc>Gestural domain attributes for staffDef in tablature.</desc>
          <attList>
            <attDef ident="tab.strings" usage="opt">
              <desc>provides a *written* pitch and octave for each open string or course of
                strings.</desc>
              <datatype>
                <rng:list>
                  <rng:oneOrMore>
                    <rng:data type="token">
                      <rng:param name="pattern">[a-g][\-#fs]?[0-9]([a-g][\-#fs]?[0-9])*</rng:param>
                    </rng:data>
                  </rng:oneOrMore>
                </rng:list>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

      </schemaSpec>
    </body>
  </text>
</TEI>
