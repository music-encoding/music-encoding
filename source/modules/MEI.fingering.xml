<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  NOTICE: Copyright (c) by the Music Encoding Initiative (MEI) Board (formerly known as "MEI Council").

  Licensed under the Educational Community License, Version 2.0 (the "License"); you may
  not use this file except in compliance with the License. You may obtain a copy of the License
  at https://opensource.org/licenses/ECL-2.0.
  
  Unless required by applicable law or agreed to in writing, software distributed under the
  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific language
  governing permissions and limitations under the License.
  
  This is a derivative work based on earlier versions of the schema Â© 2001-2006 Perry Roland
  and the Rector and Visitors of the University of Virginia; licensed under the Educational
  Community License version 1.0.
  
  CONTACT: info@music-encoding.org
-->
<?xml-model href="../validation/mei_odds.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-model href="../validation/mei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<specGrp xmlns="http://www.tei-c.org/ns/1.0" xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron" xml:id="module.MEI.fingering">
  <moduleSpec ident="MEI.fingering">
    <desc xml:lang="en">Fingering component declarations.</desc>
  </moduleSpec>
  <classSpec ident="att.fing.log" module="MEI.fingering" type="atts">
    <desc xml:lang="en">Logical domain attributes.</desc>
    <classes>
      <memberOf key="att.controlEvent"/>
      <memberOf key="att.duration.additive"/>
      <memberOf key="att.startEndId"/>
      <memberOf key="att.timestamp2.log"/>
    </classes>
  </classSpec>
  <classSpec ident="att.fingGrp.log" module="MEI.fingering" type="atts">
    <desc xml:lang="en">Logical domain attributes.</desc>
    <classes>
      <memberOf key="att.controlEvent"/>
      <memberOf key="att.duration.additive"/>
      <memberOf key="att.startEndId"/>
      <memberOf key="att.timestamp2.log"/>
    </classes>
    <attList>
      <attDef ident="form" usage="opt">
        <valList type="closed">
          <valItem ident="alter">
            <desc xml:lang="en">alternation of fingers.</desc>
          </valItem>
          <valItem ident="combi">
            <desc xml:lang="en">combination of fingers.</desc>
          </valItem>
          <valItem ident="subst">
            <desc xml:lang="en">substitution of fingers.</desc>
          </valItem>
        </valList>
      </attDef>
    </attList>
  </classSpec>
  <classSpec ident="model.fingeringLike" module="MEI.fingering" type="model">
    <desc xml:lang="en">Groups elements that capture performance instructions regarding the use of the fingers of
      the hand (or a subset of them).</desc>
    <classes>
      <memberOf key="model.controlEventLike"/>
    </classes>
  </classSpec>
  <elementSpec ident="fing" module="MEI.fingering">
    <gloss xml:lang="en">finger</gloss>
    <desc xml:lang="en">An individual finger in a fingering indication.</desc>
    <classes>
      <memberOf key="att.common"/>
      <memberOf key="att.facsimile"/>
      <memberOf key="att.fing.anl"/>
      <memberOf key="att.fing.ges"/>
      <memberOf key="att.fing.log"/>
      <memberOf key="att.fing.vis"/>
      <memberOf key="model.fingeringLike"/>
    </classes>
    <content>
      <rng:zeroOrMore>
        <rng:choice>
          <rng:text/>
          <rng:ref name="model.textPhraseLike.limited"/>
          <rng:ref name="model.editLike"/>
          <rng:ref name="model.transcriptionLike"/>
        </rng:choice>
      </rng:zeroOrMore>
    </content>
    <constraintSpec ident="fing_start-type_attributes_required" scheme="schematron">
      <constraint>
        <sch:rule context="mei:fing[not(ancestor::mei:fingGrp)]">
          <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of the
            attributes: startid, tstamp, tstamp.ges or tstamp.real.</sch:assert>
        </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="stack_exclusion" scheme="schematron">
      <!-- Exclusion implemented using Schematron -->
      <constraint>
        <sch:rule context="mei:fing">
          <sch:assert test="not(descendant::mei:stack)">The stack element is not allowed as a
            descendant of fing.</sch:assert>
        </sch:rule>
      </constraint>
    </constraintSpec>
  </elementSpec>
  <elementSpec ident="fingGrp" module="MEI.fingering">
    <gloss xml:lang="en">finger group</gloss>
    <desc xml:lang="en">A group of individual fingers in a fingering indication.</desc>
    <classes>
      <memberOf key="att.common"/>
      <memberOf key="att.facsimile"/>
      <memberOf key="att.fingGrp.anl"/>
      <memberOf key="att.fingGrp.ges"/>
      <memberOf key="att.fingGrp.log"/>
      <memberOf key="att.fingGrp.vis"/>
      <memberOf key="model.fingeringLike"/>
    </classes>
    <content>
      <rng:zeroOrMore>
        <rng:choice>
          <rng:ref name="model.fingeringLike"/>
          <rng:ref name="model.editLike"/>
          <rng:ref name="model.transcriptionLike"/>
        </rng:choice>
      </rng:zeroOrMore>
    </content>
    <constraintSpec ident="require_fingeringLike_children" scheme="schematron">
      <constraint>
        <sch:rule context="mei:fingGrp">
          <sch:assert test="count(mei:fing) + count(mei:fingGrp) &gt; 1">At least 2 fing or fingGrp
            elements are required.</sch:assert>
        </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="check_fingGrp_start-type_attributes" scheme="schematron">
      <constraint>
        <sch:pattern>
          <sch:rule context="mei:fingGrp[not(ancestor::mei:fingGrp)][@tstamp or @startid]">
            <sch:assert test="not(child::mei:*[@tstamp or @startid])">When @tstamp or @startid is
              present on fingGrp, its child elements cannot have a @tstamp or @startid
              attribute.</sch:assert>
          </sch:rule>
          <sch:rule context="mei:fingGrp[not(ancestor::mei:fingGrp)][not(@tstamp or @startid)]">
            <sch:assert
              test="count(descendant::mei:*[@tstamp or @startid]) = count(child::mei:*[local-name()='fing' or local-name()='fingGrp'])"
              >When @tstamp or @startid is not present on fingGrp, each of its child elements must
              have a @tstamp or @startid attribute.</sch:assert>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
  </elementSpec>
</specGrp>
