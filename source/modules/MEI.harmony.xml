<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  NOTICE: Copyright (c) by the Music Encoding Initiative (MEI) Board (formerly known as "MEI Council").

  Licensed under the Educational Community License, Version 2.0 (the "License"); you may
  not use this file except in compliance with the License. You may obtain a copy of the License
  at https://opensource.org/licenses/ECL-2.0.
  
  Unless required by applicable law or agreed to in writing, software distributed under the
  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific language
  governing permissions and limitations under the License.
  
  This is a derivative work based on earlier versions of the schema Â© 2001-2006 Perry Roland
  and the Rector and Visitors of the University of Virginia; licensed under the Educational
  Community License version 1.0.
  
  CONTACT: info@music-encoding.org
-->
<?xml-model href="../validation/mei_odds.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-model href="../validation/mei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<specGrp xmlns="http://www.tei-c.org/ns/1.0" xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron" xml:id="module.MEI.harmony">
  <moduleSpec ident="MEI.harmony">
    <desc xml:lang="en">Harmony component declarations.</desc>
  </moduleSpec>
  <classSpec ident="att.chordDef.log" module="MEI.harmony" type="atts">
    <desc xml:lang="en">Logical domain attributes.</desc>
    <classes>
      <memberOf key="att.stringtab.position"/>
      <memberOf key="att.stringtab.tuning"/>
    </classes>
  </classSpec>
  <classSpec ident="att.chordMember.log" module="MEI.harmony" type="atts">
    <desc xml:lang="en">Logical domain attributes.</desc>
    <classes>
      <memberOf key="att.pitched"/>
      <memberOf key="att.stringtab"/>
    </classes>
  </classSpec>
  <classSpec ident="att.f.log" module="MEI.harmony" type="atts">
    <desc xml:lang="en">Logical domain attributes.</desc>
    <classes>
      <memberOf key="att.controlEvent"/>
      <memberOf key="att.duration.additive"/>
      <memberOf key="att.startEndId"/>
      <memberOf key="att.timestamp2.log"/>
    </classes>
  </classSpec>
  <classSpec ident="att.harm.log" module="MEI.harmony" type="atts">
    <desc xml:lang="en">Logical domain attributes.</desc>
    <classes>
      <memberOf key="att.controlEvent"/>
      <memberOf key="att.duration.additive"/>
      <memberOf key="att.startEndId"/>
      <memberOf key="att.timestamp2.log"/>
    </classes>
    <attList>
      <attDef ident="chordref" usage="opt">
        <gloss xml:lang="en">chord reference</gloss>
        <desc xml:lang="en">Contains a reference to a <gi scheme="MEI">chordDef</gi> element elsewhere in the
          document.</desc>
        <datatype>
          <rng:ref name="data.URI"/>
        </datatype>
        <constraintSpec ident="check_chordrefTarget" scheme="schematron">
          <constraint>
            <sch:rule context="@chordref">
              <sch:assert role="warning" test="not(normalize-space(.) eq '')">@chordref attribute
                should have content.</sch:assert>
              <sch:assert role="warning"
                test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:chordDef/@xml:id"
                >The value in @chordref should correspond to the @xml:id attribute of a chordDef
                element.</sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
      </attDef>
    </attList>
  </classSpec>
  <classSpec ident="model.chordTableLike" module="MEI.harmony" type="model">
    <desc xml:lang="en">Groups elements that group playable chord definitions.</desc>
  </classSpec>
  <classSpec ident="model.controlEventLike.harmony" module="MEI.harmony" type="model">
    <desc xml:lang="en">Groups harmonic elements that function as control events; that is, those events that
      modify or otherwise depend on the existence of notated events.</desc>
    <classes>
      <memberOf key="model.controlEventLike"/>
    </classes>
  </classSpec>
  <classSpec ident="model.figbassLike" module="MEI.harmony" type="model">
    <desc xml:lang="en">Groups elements that record figured bass.</desc>
  </classSpec>
  <classSpec ident="model.fLike" module="MEI.harmony" type="model">
    <desc xml:lang="en">Groups elements that represent single figured bass elements.</desc>
  </classSpec>
  <classSpec ident="model.harmLike" module="MEI.harmony" type="model">
    <desc xml:lang="en">Groups elements that record indications of harmony.</desc>
    <classes>
      <memberOf key="model.controlEventLike.harmony"/>
    </classes>
  </classSpec>
  <elementSpec ident="chordDef" module="MEI.harmony">
    <gloss xml:lang="en">chord definition</gloss>
    <desc xml:lang="en">Chord tablature definition.</desc>
    <classes>
      <memberOf key="att.common"/>
      <memberOf key="att.chordDef.anl"/>
      <memberOf key="att.chordDef.ges"/>
      <memberOf key="att.chordDef.log"/>
      <memberOf key="att.chordDef.vis"/>
    </classes>
    <content>
      <elementRef key="chordMember" minOccurs="0" maxOccurs="unbounded"/>
      <elementRef key="barre" minOccurs="0" maxOccurs="unbounded"/>
    </content>
    <remarks xml:lang="en">
      <p>An <att>xml:id</att> attribute, while not required by the schema, is needed so that <gi
        scheme="MEI">harm</gi> elements can reference a particular chord definition. The
        <att>pos</att> (position) attribute is provided in order to create displayable chord
        tablature grids. <gi scheme="MEI">chordMember</gi> sub-elements record the individual
        pitches of the chord. <gi scheme="MEI">barre</gi> sub-elements may be used when a single
        finger is used to stop multiple strings.</p>
    </remarks>
  </elementSpec>
  <elementSpec ident="chordMember" module="MEI.harmony">
    <desc xml:lang="en">An individual pitch in a chord defined by a <gi scheme="MEI">chordDef</gi> element.</desc>
    <classes>
      <memberOf key="att.common"/>
      <memberOf key="att.chordMember.anl"/>
      <memberOf key="att.chordMember.ges"/>
      <memberOf key="att.chordMember.log"/>
      <memberOf key="att.chordMember.vis"/>
    </classes>
    <content>
      <empty/>
    </content>
    <remarks xml:lang="en">
      <p>The <att>string</att>, <att>fret</att>, and <att>fing</att> attributes are provided in
        order to create displayable chord tablature grids. The <att>inth</att> (harmonic interval)
        attribute may be used to facilitate automated performance of a chord. It gives the number of
        1/2 steps above the bass. Of course, for the bass note itself, <att>inth</att> should be set
        to <val>0</val>.</p>
    </remarks>
  </elementSpec>
  <elementSpec ident="chordTable" module="MEI.harmony">
    <desc xml:lang="en">Chord/tablature look-up table.</desc>
    <classes>
      <memberOf key="att.common"/>
      <memberOf key="model.chordTableLike"/>
    </classes>
    <content>
      <elementRef key="chordDef" minOccurs="1" maxOccurs="unbounded"/>
    </content>
    <remarks xml:lang="en">
      <p>A chordTable may be shared between MEI instances through the use of an external parsed
        entity containing the look-up table to be shared.</p>
    </remarks>
  </elementSpec>
  <elementSpec ident="f" module="MEI.harmony">
    <gloss xml:lang="en">figure</gloss>
    <desc xml:lang="en">Single element of a figured bass indication.</desc>
    <classes>
      <memberOf key="att.common"/>
      <memberOf key="att.facsimile"/>
      <memberOf key="att.f.anl"/>
      <memberOf key="att.f.ges"/>
      <memberOf key="att.f.log"/>
      <memberOf key="att.f.vis"/>
      <memberOf key="model.fLike"/>
    </classes>
    <content>
      <alternate minOccurs="0" maxOccurs="unbounded">
        <textNode/>
        <classRef key="model.textPhraseLike.limited"/>
        <classRef key="model.editLike"/>
        <classRef key="model.transcriptionLike"/>
      </alternate>
    </content>
  </elementSpec>
  <elementSpec ident="fb" module="MEI.harmony">
    <gloss xml:lang="en">figured bass</gloss>
    <desc xml:lang="en">Symbols added to a bass line that indicate harmony. Used to improvise a
      chordal accompaniment. Sometimes called Generalbass, thoroughbass, or basso continuo.</desc>
    <classes>
      <memberOf key="att.common"/>
      <memberOf key="att.facsimile"/>
      <memberOf key="model.figbassLike"/>
    </classes>
    <content>
      <alternate minOccurs="0" maxOccurs="unbounded">
        <classRef key="model.fLike"/>
        <classRef key="model.editLike"/>
        <classRef key="model.transcriptionLike"/>
      </alternate>
    </content>
  </elementSpec>
  <elementSpec ident="harm" module="MEI.harmony">
    <gloss xml:lang="en">harmony</gloss>
    <desc xml:lang="en">An indication of harmony, <abbr>e.g.</abbr>, chord names, tablature grids, harmonic
      analysis, figured bass.</desc>
    <classes>
      <memberOf key="att.common"/>
      <memberOf key="att.facsimile"/>
      <memberOf key="att.harm.anl"/>
      <memberOf key="att.harm.ges"/>
      <memberOf key="att.harm.log"/>
      <memberOf key="att.harm.vis"/>
      <memberOf key="model.harmLike"/>
    </classes>
    <content>
      <alternate minOccurs="0" maxOccurs="unbounded">
        <textNode/>
        <classRef key="model.textPhraseLike.limited"/>
        <classRef key="model.graphicPrimitiveLike"/>
        <classRef key="model.editLike"/>
        <classRef key="model.transcriptionLike"/>
        <classRef key="model.figbassLike"/>
      </alternate>
    </content>
    <constraintSpec ident="harm_start-type_attributes_required" scheme="schematron">
      <constraint>
        <sch:rule context="mei:harm">
          <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of the
            attributes: startid, tstamp, tstamp.ges or tstamp.real.</sch:assert>
        </sch:rule>
      </constraint>
    </constraintSpec>
  </elementSpec>
</specGrp>
